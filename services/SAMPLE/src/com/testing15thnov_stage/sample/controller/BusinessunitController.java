/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.sample.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.sample.Businessunit;
import com.testing15thnov_stage.sample.service.BusinessunitService;


/**
 * Controller object for domain model class Businessunit.
 * @see Businessunit
 */
@RestController("SAMPLE.BusinessunitController")
@Api(value = "BusinessunitController", description = "Exposes APIs to work with Businessunit resource.")
@RequestMapping("/SAMPLE/Businessunit")
public class BusinessunitController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessunitController.class);

    @Autowired
	@Qualifier("SAMPLE.BusinessunitService")
	private BusinessunitService businessunitService;

	@ApiOperation(value = "Creates a new Businessunit instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Businessunit createBusinessunit(@RequestBody Businessunit businessunit) {
		LOGGER.debug("Create Businessunit with information: {}" , businessunit);

		businessunit = businessunitService.create(businessunit);
		LOGGER.debug("Created Businessunit with information: {}" , businessunit);

	    return businessunit;
	}

    @ApiOperation(value = "Returns the Businessunit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessunit getBusinessunit(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Businessunit with id: {}" , id);

        Businessunit foundBusinessunit = businessunitService.getById(id);
        LOGGER.debug("Businessunit details with id: {}" , foundBusinessunit);

        return foundBusinessunit;
    }

    @ApiOperation(value = "Updates the Businessunit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Businessunit editBusinessunit(@PathVariable("id") Integer id, @RequestBody Businessunit businessunit) throws EntityNotFoundException {
        LOGGER.debug("Editing Businessunit with id: {}" , businessunit.getOid());

        businessunit.setOid(id);
        businessunit = businessunitService.update(businessunit);
        LOGGER.debug("Businessunit details with id: {}" , businessunit);

        return businessunit;
    }

    @ApiOperation(value = "Deletes the Businessunit instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBusinessunit(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessunit with id: {}" , id);

        Businessunit deletedBusinessunit = businessunitService.delete(id);

        return deletedBusinessunit != null;
    }

    /**
     * @deprecated Use {@link #findBusinessunits(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Businessunit instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessunit> searchBusinessunitsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Businessunits list");
        return businessunitService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessunit instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessunit> findBusinessunits(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessunits list");
        return businessunitService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Businessunit instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Businessunit> filterBusinessunits(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Businessunits list");
        return businessunitService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBusinessunits(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return businessunitService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Businessunit instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBusinessunits( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Businessunits");
		return businessunitService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBusinessunitAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return businessunitService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BusinessunitService instance
	 */
	protected void setBusinessunitService(BusinessunitService service) {
		this.businessunitService = service;
	}

}

