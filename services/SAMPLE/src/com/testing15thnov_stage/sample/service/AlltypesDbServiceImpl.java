/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.sample.AlltypesDb;


/**
 * ServiceImpl object for domain model class AlltypesDb.
 *
 * @see AlltypesDb
 */
@Service("SAMPLE.AlltypesDbService")
@Validated
public class AlltypesDbServiceImpl implements AlltypesDbService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AlltypesDbServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.AlltypesDbDao")
    private WMGenericDao<AlltypesDb, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AlltypesDb, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public AlltypesDb create(AlltypesDb alltypesDb) {
        LOGGER.debug("Creating a new AlltypesDb with information: {}", alltypesDb);
        AlltypesDb alltypesDbCreated = this.wmGenericDao.create(alltypesDb);
        return alltypesDbCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDb getById(Integer alltypesdbId) throws EntityNotFoundException {
        LOGGER.debug("Finding AlltypesDb by id: {}", alltypesdbId);
        AlltypesDb alltypesDb = this.wmGenericDao.findById(alltypesdbId);
        if (alltypesDb == null){
            LOGGER.debug("No AlltypesDb found with id: {}", alltypesdbId);
            throw new EntityNotFoundException(String.valueOf(alltypesdbId));
        }
        return alltypesDb;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDb findById(Integer alltypesdbId) {
        LOGGER.debug("Finding AlltypesDb by id: {}", alltypesdbId);
        return this.wmGenericDao.findById(alltypesdbId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public AlltypesDb update(AlltypesDb alltypesDb) throws EntityNotFoundException {
        LOGGER.debug("Updating AlltypesDb with information: {}", alltypesDb);
        this.wmGenericDao.update(alltypesDb);

        Integer alltypesdbId = alltypesDb.getIntCol();

        return this.wmGenericDao.findById(alltypesdbId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public AlltypesDb delete(Integer alltypesdbId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AlltypesDb with id: {}", alltypesdbId);
        AlltypesDb deleted = this.wmGenericDao.findById(alltypesdbId);
        if (deleted == null) {
            LOGGER.debug("No AlltypesDb found with id: {}", alltypesdbId);
            throw new EntityNotFoundException(String.valueOf(alltypesdbId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<AlltypesDb> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesDbs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<AlltypesDb> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AlltypesDbs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table AlltypesDb to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

