/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.sample.Businessunit;

/**
 * Service object for domain model class {@link Businessunit}.
 */
public interface BusinessunitService {

    /**
     * Creates a new Businessunit. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Businessunit if any.
     *
     * @param businessunit Details of the Businessunit to be created; value cannot be null.
     * @return The newly created Businessunit.
     */
	Businessunit create(@Valid Businessunit businessunit);


	/**
	 * Returns Businessunit by given id if exists.
	 *
	 * @param businessunitId The id of the Businessunit to get; value cannot be null.
	 * @return Businessunit associated with the given businessunitId.
     * @throws EntityNotFoundException If no Businessunit is found.
	 */
	Businessunit getById(Integer businessunitId) throws EntityNotFoundException;

    /**
	 * Find and return the Businessunit by given id if exists, returns null otherwise.
	 *
	 * @param businessunitId The id of the Businessunit to get; value cannot be null.
	 * @return Businessunit associated with the given businessunitId.
	 */
	Businessunit findById(Integer businessunitId);


	/**
	 * Updates the details of an existing Businessunit. It replaces all fields of the existing Businessunit with the given businessunit.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Businessunit if any.
     *
	 * @param businessunit The details of the Businessunit to be updated; value cannot be null.
	 * @return The updated Businessunit.
	 * @throws EntityNotFoundException if no Businessunit is found with given input.
	 */
	Businessunit update(@Valid Businessunit businessunit) throws EntityNotFoundException;

    /**
	 * Deletes an existing Businessunit with the given id.
	 *
	 * @param businessunitId The id of the Businessunit to be deleted; value cannot be null.
	 * @return The deleted Businessunit.
	 * @throws EntityNotFoundException if no Businessunit found with the given id.
	 */
	Businessunit delete(Integer businessunitId) throws EntityNotFoundException;

	/**
	 * Find all Businessunits matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businessunits.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Businessunit> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Businessunits matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Businessunits.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Businessunit> findAll(String query, Pageable pageable);

    /**
	 * Exports all Businessunits matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Businessunits in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Businessunit.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

