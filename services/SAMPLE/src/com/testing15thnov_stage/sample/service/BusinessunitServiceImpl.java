/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.sample.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.sample.Businessunit;


/**
 * ServiceImpl object for domain model class Businessunit.
 *
 * @see Businessunit
 */
@Service("SAMPLE.BusinessunitService")
@Validated
public class BusinessunitServiceImpl implements BusinessunitService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BusinessunitServiceImpl.class);


    @Autowired
    @Qualifier("SAMPLE.BusinessunitDao")
    private WMGenericDao<Businessunit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Businessunit, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "SAMPLETransactionManager")
    @Override
	public Businessunit create(Businessunit businessunit) {
        LOGGER.debug("Creating a new Businessunit with information: {}", businessunit);
        Businessunit businessunitCreated = this.wmGenericDao.create(businessunit);
        return businessunitCreated;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Businessunit getById(Integer businessunitId) throws EntityNotFoundException {
        LOGGER.debug("Finding Businessunit by id: {}", businessunitId);
        Businessunit businessunit = this.wmGenericDao.findById(businessunitId);
        if (businessunit == null){
            LOGGER.debug("No Businessunit found with id: {}", businessunitId);
            throw new EntityNotFoundException(String.valueOf(businessunitId));
        }
        return businessunit;
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Businessunit findById(Integer businessunitId) {
        LOGGER.debug("Finding Businessunit by id: {}", businessunitId);
        return this.wmGenericDao.findById(businessunitId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "SAMPLETransactionManager")
	@Override
	public Businessunit update(Businessunit businessunit) throws EntityNotFoundException {
        LOGGER.debug("Updating Businessunit with information: {}", businessunit);
        this.wmGenericDao.update(businessunit);

        Integer businessunitId = businessunit.getOid();

        return this.wmGenericDao.findById(businessunitId);
    }

    @Transactional(value = "SAMPLETransactionManager")
	@Override
	public Businessunit delete(Integer businessunitId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Businessunit with id: {}", businessunitId);
        Businessunit deleted = this.wmGenericDao.findById(businessunitId);
        if (deleted == null) {
            LOGGER.debug("No Businessunit found with id: {}", businessunitId);
            throw new EntityNotFoundException(String.valueOf(businessunitId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public Page<Businessunit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Businessunits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Page<Businessunit> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Businessunits");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service SAMPLE for table Businessunit to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "SAMPLETransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

