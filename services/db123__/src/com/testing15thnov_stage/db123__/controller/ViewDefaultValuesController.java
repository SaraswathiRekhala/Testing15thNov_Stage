/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.db123__.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Date;
import java.sql.Time;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.db123__.ViewDefaultValues;
import com.testing15thnov_stage.db123__.ViewDefaultValuesId;
import com.testing15thnov_stage.db123__.service.ViewDefaultValuesService;


/**
 * Controller object for domain model class ViewDefaultValues.
 * @see ViewDefaultValues
 */
@RestController("db123__.ViewDefaultValuesController")
@Api(value = "ViewDefaultValuesController", description = "Exposes APIs to work with ViewDefaultValues resource.")
@RequestMapping("/db123__/ViewDefaultValues")
public class ViewDefaultValuesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewDefaultValuesController.class);

    @Autowired
	@Qualifier("db123__.ViewDefaultValuesService")
	private ViewDefaultValuesService viewDefaultValuesService;

	@ApiOperation(value = "Creates a new ViewDefaultValues instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public ViewDefaultValues createViewDefaultValues(@RequestPart("wm_data_json") ViewDefaultValues viewDefaultValues, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create ViewDefaultValues with information: {}" , viewDefaultValues);

    viewDefaultValues.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		viewDefaultValues = viewDefaultValuesService.create(viewDefaultValues);
		LOGGER.debug("Created ViewDefaultValues with information: {}" , viewDefaultValues);

	    return viewDefaultValues;
	}

@ApiOperation(value = "Returns the ViewDefaultValues instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewDefaultValues getViewDefaultValues(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol) throws EntityNotFoundException {

        ViewDefaultValuesId viewdefaultvaluesId = new ViewDefaultValuesId();
        viewdefaultvaluesId.setAssignedId(assignedId);
        viewdefaultvaluesId.setByteCol(byteCol);
        viewdefaultvaluesId.setShortCol(shortCol);
        viewdefaultvaluesId.setIntCol(intCol);
        viewdefaultvaluesId.setFloatCol(floatCol);
        viewdefaultvaluesId.setLongCol(longCol);
        viewdefaultvaluesId.setDoubleCol(doubleCol);
        viewdefaultvaluesId.setBigintCol(bigintCol);
        viewdefaultvaluesId.setBigdecCol(bigdecCol);
        viewdefaultvaluesId.setCharCol(charCol);
        viewdefaultvaluesId.setStringCol(stringCol);
        viewdefaultvaluesId.setTextCol(textCol);
        viewdefaultvaluesId.setClobCol(clobCol);
        viewdefaultvaluesId.setDateCol(dateCol);
        viewdefaultvaluesId.setDatetimeCol(datetimeCol);
        viewdefaultvaluesId.setTimeCol(timeCol);
        viewdefaultvaluesId.setTimestampCol(timestampCol);
        viewdefaultvaluesId.setBooleanCol(booleanCol);
        viewdefaultvaluesId.setBlobCol(blobCol);

        LOGGER.debug("Getting ViewDefaultValues with id: {}" , viewdefaultvaluesId);
        ViewDefaultValues viewDefaultValues = viewDefaultValuesService.getById(viewdefaultvaluesId);
        LOGGER.debug("ViewDefaultValues details with id: {}" , viewDefaultValues);

        return viewDefaultValues;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in ViewDefaultValues instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id/content/{fieldName}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public void getViewDefaultValuesBLOBContent(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws EntityNotFoundException {

        LOGGER.debug("Retrieves content for the given BLOB field {} in ViewDefaultValues instance" , fieldName);

        if(!WMRuntimeUtils.isLob(ViewDefaultValues.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName +  " is not a valid BLOB type");
        }

        ViewDefaultValuesId viewdefaultvaluesId = new ViewDefaultValuesId();
        viewdefaultvaluesId.setAssignedId(assignedId);
        viewdefaultvaluesId.setByteCol(byteCol);
        viewdefaultvaluesId.setShortCol(shortCol);
        viewdefaultvaluesId.setIntCol(intCol);
        viewdefaultvaluesId.setFloatCol(floatCol);
        viewdefaultvaluesId.setLongCol(longCol);
        viewdefaultvaluesId.setDoubleCol(doubleCol);
        viewdefaultvaluesId.setBigintCol(bigintCol);
        viewdefaultvaluesId.setBigdecCol(bigdecCol);
        viewdefaultvaluesId.setCharCol(charCol);
        viewdefaultvaluesId.setStringCol(stringCol);
        viewdefaultvaluesId.setTextCol(textCol);
        viewdefaultvaluesId.setClobCol(clobCol);
        viewdefaultvaluesId.setDateCol(dateCol);
        viewdefaultvaluesId.setDatetimeCol(datetimeCol);
        viewdefaultvaluesId.setTimeCol(timeCol);
        viewdefaultvaluesId.setTimestampCol(timestampCol);
        viewdefaultvaluesId.setBooleanCol(booleanCol);
        viewdefaultvaluesId.setBlobCol(blobCol);

        ViewDefaultValues viewDefaultValues = viewDefaultValuesService.getById(viewdefaultvaluesId);
        WMMultipartUtils.buildHttpResponseForBlob(viewDefaultValues, fieldName, httpServletRequest, httpServletResponse);
    }



    @ApiOperation(value = "Updates the ViewDefaultValues instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewDefaultValues editViewDefaultValues(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol, @RequestBody ViewDefaultValues viewDefaultValues) throws EntityNotFoundException {

        viewDefaultValues.setAssignedId(assignedId);
        viewDefaultValues.setByteCol(byteCol);
        viewDefaultValues.setShortCol(shortCol);
        viewDefaultValues.setIntCol(intCol);
        viewDefaultValues.setFloatCol(floatCol);
        viewDefaultValues.setLongCol(longCol);
        viewDefaultValues.setDoubleCol(doubleCol);
        viewDefaultValues.setBigintCol(bigintCol);
        viewDefaultValues.setBigdecCol(bigdecCol);
        viewDefaultValues.setCharCol(charCol);
        viewDefaultValues.setStringCol(stringCol);
        viewDefaultValues.setTextCol(textCol);
        viewDefaultValues.setClobCol(clobCol);
        viewDefaultValues.setDateCol(dateCol);
        viewDefaultValues.setDatetimeCol(datetimeCol);
        viewDefaultValues.setTimeCol(timeCol);
        viewDefaultValues.setTimestampCol(timestampCol);
        viewDefaultValues.setBooleanCol(booleanCol);
        viewDefaultValues.setBlobCol(blobCol);

        LOGGER.debug("ViewDefaultValues details with id is updated with: {}" , viewDefaultValues);

        return viewDefaultValuesService.update(viewDefaultValues);
    }

    @ApiOperation(value = "Updates the ViewDefaultValues instance associated with the given composite-id.This API should be used when ViewDefaultValues instance fields that require multipart data.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewDefaultValues editViewDefaultValues(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        return this.editViewDefaultValuesAndMultiparts(assignedId, byteCol, shortCol, intCol, floatCol, longCol, doubleCol, bigintCol, bigdecCol, charCol, stringCol, textCol, clobCol, dateCol, datetimeCol, timeCol, timestampCol, booleanCol, blobCol, multipartHttpServletRequest);
    }

    @ApiOperation(value = "Updates the ViewDefaultValues instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT,  consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public ViewDefaultValues editViewDefaultValuesAndMultiparts(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException { 

        ViewDefaultValuesId viewdefaultvaluesId = new ViewDefaultValuesId();
        viewdefaultvaluesId.setAssignedId(assignedId);
        viewdefaultvaluesId.setByteCol(byteCol);
        viewdefaultvaluesId.setShortCol(shortCol);
        viewdefaultvaluesId.setIntCol(intCol);
        viewdefaultvaluesId.setFloatCol(floatCol);
        viewdefaultvaluesId.setLongCol(longCol);
        viewdefaultvaluesId.setDoubleCol(doubleCol);
        viewdefaultvaluesId.setBigintCol(bigintCol);
        viewdefaultvaluesId.setBigdecCol(bigdecCol);
        viewdefaultvaluesId.setCharCol(charCol);
        viewdefaultvaluesId.setStringCol(stringCol);
        viewdefaultvaluesId.setTextCol(textCol);
        viewdefaultvaluesId.setClobCol(clobCol);
        viewdefaultvaluesId.setDateCol(dateCol);
        viewdefaultvaluesId.setDatetimeCol(datetimeCol);
        viewdefaultvaluesId.setTimeCol(timeCol);
        viewdefaultvaluesId.setTimestampCol(timestampCol);
        viewdefaultvaluesId.setBooleanCol(booleanCol);
        viewdefaultvaluesId.setBlobCol(blobCol);

        ViewDefaultValues newViewDefaultValues = WMMultipartUtils.toObject(multipartHttpServletRequest, ViewDefaultValues.class, "db123__");
        ViewDefaultValues oldViewDefaultValues = viewDefaultValuesService.getById(viewdefaultvaluesId);

        WMMultipartUtils.updateLobsContent(oldViewDefaultValues, newViewDefaultValues);

        newViewDefaultValues.setAssignedId(assignedId);
        newViewDefaultValues.setByteCol(byteCol);
        newViewDefaultValues.setShortCol(shortCol);
        newViewDefaultValues.setIntCol(intCol);
        newViewDefaultValues.setFloatCol(floatCol);
        newViewDefaultValues.setLongCol(longCol);
        newViewDefaultValues.setDoubleCol(doubleCol);
        newViewDefaultValues.setBigintCol(bigintCol);
        newViewDefaultValues.setBigdecCol(bigdecCol);
        newViewDefaultValues.setCharCol(charCol);
        newViewDefaultValues.setStringCol(stringCol);
        newViewDefaultValues.setTextCol(textCol);
        newViewDefaultValues.setClobCol(clobCol);
        newViewDefaultValues.setDateCol(dateCol);
        newViewDefaultValues.setDatetimeCol(datetimeCol);
        newViewDefaultValues.setTimeCol(timeCol);
        newViewDefaultValues.setTimestampCol(timestampCol);
        newViewDefaultValues.setBooleanCol(booleanCol);
        newViewDefaultValues.setBlobCol(blobCol);

        LOGGER.debug("ViewDefaultValues details with id is updated with: {}" , newViewDefaultValues);

        return viewDefaultValuesService.update(newViewDefaultValues);
    }


    @ApiOperation(value = "Deletes the ViewDefaultValues instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteViewDefaultValues(@RequestParam("assignedId") Integer assignedId,@RequestParam("byteCol") Byte byteCol,@RequestParam("shortCol") Short shortCol,@RequestParam("intCol") Integer intCol,@RequestParam("floatCol") Double floatCol,@RequestParam("longCol") Long longCol,@RequestParam("doubleCol") BigDecimal doubleCol,@RequestParam("bigintCol") BigInteger bigintCol,@RequestParam("bigdecCol") BigDecimal bigdecCol,@RequestParam("charCol") String charCol,@RequestParam("stringCol") String stringCol,@RequestParam("textCol") String textCol,@RequestParam("clobCol") String clobCol,@RequestParam("dateCol") Date dateCol,@RequestParam("datetimeCol") LocalDateTime datetimeCol,@RequestParam("timeCol") Time timeCol,@RequestParam("timestampCol") LocalDateTime timestampCol,@RequestParam("booleanCol") Boolean booleanCol,@RequestParam("blobCol") byte[] blobCol) throws EntityNotFoundException {

        ViewDefaultValuesId viewdefaultvaluesId = new ViewDefaultValuesId();
        viewdefaultvaluesId.setAssignedId(assignedId);
        viewdefaultvaluesId.setByteCol(byteCol);
        viewdefaultvaluesId.setShortCol(shortCol);
        viewdefaultvaluesId.setIntCol(intCol);
        viewdefaultvaluesId.setFloatCol(floatCol);
        viewdefaultvaluesId.setLongCol(longCol);
        viewdefaultvaluesId.setDoubleCol(doubleCol);
        viewdefaultvaluesId.setBigintCol(bigintCol);
        viewdefaultvaluesId.setBigdecCol(bigdecCol);
        viewdefaultvaluesId.setCharCol(charCol);
        viewdefaultvaluesId.setStringCol(stringCol);
        viewdefaultvaluesId.setTextCol(textCol);
        viewdefaultvaluesId.setClobCol(clobCol);
        viewdefaultvaluesId.setDateCol(dateCol);
        viewdefaultvaluesId.setDatetimeCol(datetimeCol);
        viewdefaultvaluesId.setTimeCol(timeCol);
        viewdefaultvaluesId.setTimestampCol(timestampCol);
        viewdefaultvaluesId.setBooleanCol(booleanCol);
        viewdefaultvaluesId.setBlobCol(blobCol);

        LOGGER.debug("Deleting ViewDefaultValues with id: {}" , viewdefaultvaluesId);
        ViewDefaultValues viewDefaultValues = viewDefaultValuesService.delete(viewdefaultvaluesId);

        return viewDefaultValues != null;
    }


    /**
     * @deprecated Use {@link #findViewDefaultValues(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of ViewDefaultValues instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewDefaultValues> searchViewDefaultValuesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ViewDefaultValues list");
        return viewDefaultValuesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewDefaultValues instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewDefaultValues> findViewDefaultValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewDefaultValues list");
        return viewDefaultValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of ViewDefaultValues instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<ViewDefaultValues> filterViewDefaultValues(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering ViewDefaultValues list");
        return viewDefaultValuesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportViewDefaultValues(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return viewDefaultValuesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of ViewDefaultValues instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countViewDefaultValues( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting ViewDefaultValues");
		return viewDefaultValuesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getViewDefaultValuesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return viewDefaultValuesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service ViewDefaultValuesService instance
	 */
	protected void setViewDefaultValuesService(ViewDefaultValuesService service) {
		this.viewDefaultValuesService = service;
	}

}

