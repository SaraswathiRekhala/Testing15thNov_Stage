/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.db123__.ViewDefaultValues;
import com.testing15thnov_stage.db123__.ViewDefaultValuesId;


/**
 * ServiceImpl object for domain model class ViewDefaultValues.
 *
 * @see ViewDefaultValues
 */
@Service("db123__.ViewDefaultValuesService")
@Validated
public class ViewDefaultValuesServiceImpl implements ViewDefaultValuesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewDefaultValuesServiceImpl.class);


    @Autowired
    @Qualifier("db123__.ViewDefaultValuesDao")
    private WMGenericDao<ViewDefaultValues, ViewDefaultValuesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewDefaultValues, ViewDefaultValuesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
	public ViewDefaultValues create(ViewDefaultValues viewDefaultValues) {
        LOGGER.debug("Creating a new ViewDefaultValues with information: {}", viewDefaultValues);
        ViewDefaultValues viewDefaultValuesCreated = this.wmGenericDao.create(viewDefaultValues);
        return viewDefaultValuesCreated;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ViewDefaultValues getById(ViewDefaultValuesId viewdefaultvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Finding ViewDefaultValues by id: {}", viewdefaultvaluesId);
        ViewDefaultValues viewDefaultValues = this.wmGenericDao.findById(viewdefaultvaluesId);
        if (viewDefaultValues == null){
            LOGGER.debug("No ViewDefaultValues found with id: {}", viewdefaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(viewdefaultvaluesId));
        }
        return viewDefaultValues;
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ViewDefaultValues findById(ViewDefaultValuesId viewdefaultvaluesId) {
        LOGGER.debug("Finding ViewDefaultValues by id: {}", viewdefaultvaluesId);
        return this.wmGenericDao.findById(viewdefaultvaluesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
	@Override
	public ViewDefaultValues update(ViewDefaultValues viewDefaultValues) throws EntityNotFoundException {
        LOGGER.debug("Updating ViewDefaultValues with information: {}", viewDefaultValues);
        this.wmGenericDao.update(viewDefaultValues);

        ViewDefaultValuesId viewdefaultvaluesId = new ViewDefaultValuesId();
        viewdefaultvaluesId.setAssignedId(viewDefaultValues.getAssignedId());
        viewdefaultvaluesId.setByteCol(viewDefaultValues.getByteCol());
        viewdefaultvaluesId.setShortCol(viewDefaultValues.getShortCol());
        viewdefaultvaluesId.setIntCol(viewDefaultValues.getIntCol());
        viewdefaultvaluesId.setFloatCol(viewDefaultValues.getFloatCol());
        viewdefaultvaluesId.setLongCol(viewDefaultValues.getLongCol());
        viewdefaultvaluesId.setDoubleCol(viewDefaultValues.getDoubleCol());
        viewdefaultvaluesId.setBigintCol(viewDefaultValues.getBigintCol());
        viewdefaultvaluesId.setBigdecCol(viewDefaultValues.getBigdecCol());
        viewdefaultvaluesId.setCharCol(viewDefaultValues.getCharCol());
        viewdefaultvaluesId.setStringCol(viewDefaultValues.getStringCol());
        viewdefaultvaluesId.setTextCol(viewDefaultValues.getTextCol());
        viewdefaultvaluesId.setClobCol(viewDefaultValues.getClobCol());
        viewdefaultvaluesId.setDateCol(viewDefaultValues.getDateCol());
        viewdefaultvaluesId.setDatetimeCol(viewDefaultValues.getDatetimeCol());
        viewdefaultvaluesId.setTimeCol(viewDefaultValues.getTimeCol());
        viewdefaultvaluesId.setTimestampCol(viewDefaultValues.getTimestampCol());
        viewdefaultvaluesId.setBooleanCol(viewDefaultValues.getBooleanCol());
        viewdefaultvaluesId.setBlobCol(viewDefaultValues.getBlobCol());

        return this.wmGenericDao.findById(viewdefaultvaluesId);
    }

    @Transactional(value = "db123__TransactionManager")
	@Override
	public ViewDefaultValues delete(ViewDefaultValuesId viewdefaultvaluesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ViewDefaultValues with id: {}", viewdefaultvaluesId);
        ViewDefaultValues deleted = this.wmGenericDao.findById(viewdefaultvaluesId);
        if (deleted == null) {
            LOGGER.debug("No ViewDefaultValues found with id: {}", viewdefaultvaluesId);
            throw new EntityNotFoundException(String.valueOf(viewdefaultvaluesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public Page<ViewDefaultValues> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewDefaultValues");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<ViewDefaultValues> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewDefaultValues");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table ViewDefaultValues to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

