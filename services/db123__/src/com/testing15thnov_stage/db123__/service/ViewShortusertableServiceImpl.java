/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.db123__.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.db123__.ViewShortusertable;


/**
 * ServiceImpl object for domain model class ViewShortusertable.
 *
 * @see ViewShortusertable
 */
@Service("db123__.ViewShortusertableService")
@Validated
public class ViewShortusertableServiceImpl implements ViewShortusertableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewShortusertableServiceImpl.class);


    @Autowired
    @Qualifier("db123__.ViewShortusertableDao")
    private WMGenericDao<ViewShortusertable, Short> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewShortusertable, Short> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "db123__TransactionManager")
    @Override
	public ViewShortusertable create(ViewShortusertable viewShortusertable) {
        LOGGER.debug("Creating a new ViewShortusertable with information: {}", viewShortusertable);
        ViewShortusertable viewShortusertableCreated = this.wmGenericDao.create(viewShortusertable);
        return viewShortusertableCreated;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ViewShortusertable getById(Short viewshortusertableId) throws EntityNotFoundException {
        LOGGER.debug("Finding ViewShortusertable by id: {}", viewshortusertableId);
        ViewShortusertable viewShortusertable = this.wmGenericDao.findById(viewshortusertableId);
        if (viewShortusertable == null){
            LOGGER.debug("No ViewShortusertable found with id: {}", viewshortusertableId);
            throw new EntityNotFoundException(String.valueOf(viewshortusertableId));
        }
        return viewShortusertable;
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public ViewShortusertable findById(Short viewshortusertableId) {
        LOGGER.debug("Finding ViewShortusertable by id: {}", viewshortusertableId);
        return this.wmGenericDao.findById(viewshortusertableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "db123__TransactionManager")
	@Override
	public ViewShortusertable update(ViewShortusertable viewShortusertable) throws EntityNotFoundException {
        LOGGER.debug("Updating ViewShortusertable with information: {}", viewShortusertable);
        this.wmGenericDao.update(viewShortusertable);

        Short viewshortusertableId = viewShortusertable.getUserId();

        return this.wmGenericDao.findById(viewshortusertableId);
    }

    @Transactional(value = "db123__TransactionManager")
	@Override
	public ViewShortusertable delete(Short viewshortusertableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ViewShortusertable with id: {}", viewshortusertableId);
        ViewShortusertable deleted = this.wmGenericDao.findById(viewshortusertableId);
        if (deleted == null) {
            LOGGER.debug("No ViewShortusertable found with id: {}", viewshortusertableId);
            throw new EntityNotFoundException(String.valueOf(viewshortusertableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public Page<ViewShortusertable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewShortusertables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Page<ViewShortusertable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewShortusertables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service db123__ for table ViewShortusertable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "db123__TransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

