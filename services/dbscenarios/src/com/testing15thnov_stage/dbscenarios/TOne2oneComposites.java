/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.IdClass;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;

import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;

/**
 * TOne2oneComposites generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T_ONE2ONE_COMPOSITES`")
@IdClass(TOne2oneComposites1Id.class)
public class TOne2oneComposites implements Serializable {

    private Short byteId;
    private Short shortId;
    private String charId;
    private String stringId;
    @Type(type = "DateTime")
    private LocalDateTime datetimeCol;
    private TOne2oneComposites1 tone2oneComposites1;

    @Id
    @Column(name = "`BYTE ID`", nullable = false, insertable = false, updatable = false, scale = 0, precision = 3)
    public Short getByteId() {
        return this.byteId;
    }

    public void setByteId(Short byteId) {
        this.byteId = byteId;
    }

    @Id
    @Column(name = "`SHORT ID`", nullable = false, insertable = false, updatable = false, scale = 0, precision = 5)
    public Short getShortId() {
        return this.shortId;
    }

    public void setShortId(Short shortId) {
        this.shortId = shortId;
    }

    @Id
    @Column(name = "`CHAR ID`", nullable = false, insertable = false, updatable = false, length = 1)
    public String getCharId() {
        return this.charId;
    }

    public void setCharId(String charId) {
        this.charId = charId;
    }

    @Id
    @Column(name = "`STRING ID`", nullable = false, insertable = false, updatable = false, length = 255)
    public String getStringId() {
        return this.stringId;
    }

    public void setStringId(String stringId) {
        this.stringId = stringId;
    }

    @Column(name = "`DATETIME COL`", nullable = true)
    public LocalDateTime getDatetimeCol() {
        return this.datetimeCol;
    }

    public void setDatetimeCol(LocalDateTime datetimeCol) {
        this.datetimeCol = datetimeCol;
    }

    @OneToOne(fetch = FetchType.EAGER)
    @PrimaryKeyJoinColumn
    public TOne2oneComposites1 getTone2oneComposites1() {
        return this.tone2oneComposites1;
    }

    public void setTone2oneComposites1(TOne2oneComposites1 tone2oneComposites1) {
        if(tone2oneComposites1 != null) {
            this.byteId = tone2oneComposites1.getByteId();
            this.shortId = tone2oneComposites1.getShortId();
            this.charId = tone2oneComposites1.getCharId();
            this.stringId = tone2oneComposites1.getStringId();
        }

        this.tone2oneComposites1 = tone2oneComposites1;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TOne2oneComposites)) return false;
        final TOne2oneComposites tone2oneComposites = (TOne2oneComposites) o;
        return Objects.equals(getByteId(), tone2oneComposites.getByteId()) &&
                Objects.equals(getShortId(), tone2oneComposites.getShortId()) &&
                Objects.equals(getCharId(), tone2oneComposites.getCharId()) &&
                Objects.equals(getStringId(), tone2oneComposites.getStringId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getByteId(),
                getShortId(),
                getCharId(),
                getStringId());
    }
}

