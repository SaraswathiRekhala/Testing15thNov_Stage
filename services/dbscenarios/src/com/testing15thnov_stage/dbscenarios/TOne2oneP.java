/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Time;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * TOne2oneP generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T ONE2ONE P`", uniqueConstraints = {
        @UniqueConstraint(name = "`SERIAL COL`", columnNames = {"`SERIAL COL`"})})
public class TOne2oneP implements Serializable {

    private Short byteCol;
    private Date dateCol;
    private long serialCol;
    private Time timeType;
    private String charId;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] blobCol;
    private TOne2oneC tone2oneC;

    @Id
    @Column(name = "`BYTE COL`", nullable = false, scale = 0, precision = 3)
    public Short getByteCol() {
        return this.byteCol;
    }

    public void setByteCol(Short byteCol) {
        this.byteCol = byteCol;
    }

    @Column(name = "`DATE COL`", nullable = false)
    public Date getDateCol() {
        return this.dateCol;
    }

    public void setDateCol(Date dateCol) {
        this.dateCol = dateCol;
    }

    @Column(name = "`SERIAL COL`", nullable = false, scale = 0, precision = 19)
    public long getSerialCol() {
        return this.serialCol;
    }

    public void setSerialCol(long serialCol) {
        this.serialCol = serialCol;
    }

    @Column(name = "`TIME TYPE`", nullable = false)
    public Time getTimeType() {
        return this.timeType;
    }

    public void setTimeType(Time timeType) {
        this.timeType = timeType;
    }

    @Column(name = "`CHAR ID`", nullable = true, length = 1)
    public String getCharId() {
        return this.charId;
    }

    public void setCharId(String charId) {
        this.charId = charId;
    }

    @Column(name = "`BLOB COL`", nullable = true)
    public byte[] getBlobCol() {
        return this.blobCol;
    }

    public void setBlobCol(byte[] blobCol) {
        this.blobCol = blobCol;
    }

    @OneToOne(fetch = FetchType.EAGER, mappedBy = "tone2oneP")
    public TOne2oneC getTone2oneC() {
        return this.tone2oneC;
    }

    public void setTone2oneC(TOne2oneC tone2oneC) {
        this.tone2oneC = tone2oneC;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TOne2oneP)) return false;
        final TOne2oneP tone2oneP = (TOne2oneP) o;
        return Objects.equals(getByteCol(), tone2oneP.getByteCol());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getByteCol());
    }
}

