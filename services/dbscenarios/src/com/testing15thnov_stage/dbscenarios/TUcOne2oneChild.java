/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToOne;
import javax.persistence.Table;

/**
 * TUcOne2oneChild generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`T_UC_ONE2ONE CHILD`")
public class TUcOne2oneChild implements Serializable {

    private Short shortid;
    private Date column2;
    private Timestamp column3;
    private TUcOne2oneParent tucOne2oneParent;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`SHORTID`", nullable = false, scale = 0, precision = 5)
    public Short getShortid() {
        return this.shortid;
    }

    public void setShortid(Short shortid) {
        this.shortid = shortid;
    }

    @Column(name = "`COLUMN2`", nullable = true)
    public Date getColumn2() {
        return this.column2;
    }

    public void setColumn2(Date column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN3`", nullable = false)
    public Timestamp getColumn3() {
        return this.column3;
    }

    public void setColumn3(Timestamp column3) {
        this.column3 = column3;
    }

    @OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.REMOVE, mappedBy = "tucOne2oneChild")
    public TUcOne2oneParent getTucOne2oneParent() {
        return this.tucOne2oneParent;
    }

    public void setTucOne2oneParent(TUcOne2oneParent tucOne2oneParent) {
        this.tucOne2oneParent = tucOne2oneParent;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof TUcOne2oneChild)) return false;
        final TUcOne2oneChild tucOne2oneChild = (TUcOne2oneChild) o;
        return Objects.equals(getShortid(), tucOne2oneChild.getShortid());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getShortid());
    }
}

