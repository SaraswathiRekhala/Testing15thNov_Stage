/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * Table20 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`TABLE20`")
public class Table20 implements Serializable {

    private Integer id;
    private String column2;
    private String column4;
    private Integer column3;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] column5;
    private Table20 table20ByColumn3;
    private List<Table20> table20sForColumn3;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN2`", nullable = false, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN4`", nullable = false, length = 255)
    public String getColumn4() {
        return this.column4;
    }

    public void setColumn4(String column4) {
        this.column4 = column4;
    }

    @Column(name = "`COLUMN3`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn3() {
        return this.column3;
    }

    public void setColumn3(Integer column3) {
        this.column3 = column3;
    }

    @Column(name = "`COLUMN5`", nullable = false)
    public byte[] getColumn5() {
        return this.column5;
    }

    public void setColumn5(byte[] column5) {
        this.column5 = column5;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"table20ByColumn3", "table20sForColumn3"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN3`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE20_TO_TABLE20_COCh6AO`"))
    public Table20 getTable20ByColumn3() {
        return this.table20ByColumn3;
    }

    public void setTable20ByColumn3(Table20 table20ByColumn3) {
        if(table20ByColumn3 != null) {
            this.column3 = table20ByColumn3.getId();
        }

        this.table20ByColumn3 = table20ByColumn3;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"table20ByColumn3", "table20sForColumn3"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "table20ByColumn3")
    public List<Table20> getTable20sForColumn3() {
        return this.table20sForColumn3;
    }

    public void setTable20sForColumn3(List<Table20> table20sForColumn3) {
        this.table20sForColumn3 = table20sForColumn3;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table20)) return false;
        final Table20 table20 = (Table20) o;
        return Objects.equals(getId(), table20.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

