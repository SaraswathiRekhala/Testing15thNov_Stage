/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonProperty.Access;

/**
 * Table8 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`TABLE8`")
public class Table8 implements Serializable {

    private Integer id;
    private Boolean column3;
    private Integer column2;
    @JsonProperty(access = Access.READ_ONLY)
    private byte[] column4;
    private Table8 table8ByColumn2;
    private List<Table8> table8sForColumn2;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`ID`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`COLUMN3`", nullable = true)
    public Boolean getColumn3() {
        return this.column3;
    }

    public void setColumn3(Boolean column3) {
        this.column3 = column3;
    }

    @Column(name = "`COLUMN2`", nullable = true, scale = 0, precision = 10)
    public Integer getColumn2() {
        return this.column2;
    }

    public void setColumn2(Integer column2) {
        this.column2 = column2;
    }

    @Column(name = "`COLUMN4`", nullable = true)
    public byte[] getColumn4() {
        return this.column4;
    }

    public void setColumn4(byte[] column4) {
        this.column4 = column4;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"table8ByColumn2", "table8sForColumn2"})
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`COLUMN2`", referencedColumnName = "`ID`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FK_TABLE8_TO_TABLE8_COLUw3Ghf`"))
    public Table8 getTable8ByColumn2() {
        return this.table8ByColumn2;
    }

    public void setTable8ByColumn2(Table8 table8ByColumn2) {
        if(table8ByColumn2 != null) {
            this.column2 = table8ByColumn2.getId();
        }

        this.table8ByColumn2 = table8ByColumn2;
    }

    // ignoring self relation properties to avoid circular loops.
    @JsonIgnoreProperties({"table8ByColumn2", "table8sForColumn2"})
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.REMOVE, mappedBy = "table8ByColumn2")
    public List<Table8> getTable8sForColumn2() {
        return this.table8sForColumn2;
    }

    public void setTable8sForColumn2(List<Table8> table8sForColumn2) {
        this.table8sForColumn2 = table8sForColumn2;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table8)) return false;
        final Table8 table8 = (Table8) o;
        return Objects.equals(getId(), table8.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}

