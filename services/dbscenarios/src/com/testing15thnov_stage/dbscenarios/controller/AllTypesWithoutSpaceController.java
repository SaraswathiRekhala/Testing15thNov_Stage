/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.AllTypesWithoutSpace;
import com.testing15thnov_stage.dbscenarios.service.AllTypesWithoutSpaceService;


/**
 * Controller object for domain model class AllTypesWithoutSpace.
 * @see AllTypesWithoutSpace
 */
@RestController("dbscenarios.AllTypesWithoutSpaceController")
@Api(value = "AllTypesWithoutSpaceController", description = "Exposes APIs to work with AllTypesWithoutSpace resource.")
@RequestMapping("/dbscenarios/AllTypesWithoutSpace")
public class AllTypesWithoutSpaceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllTypesWithoutSpaceController.class);

    @Autowired
	@Qualifier("dbscenarios.AllTypesWithoutSpaceService")
	private AllTypesWithoutSpaceService allTypesWithoutSpaceService;

	@ApiOperation(value = "Creates a new AllTypesWithoutSpace instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public AllTypesWithoutSpace createAllTypesWithoutSpace(@RequestPart("wm_data_json") AllTypesWithoutSpace allTypesWithoutSpace, @RequestPart(value = "blobcol", required = false) MultipartFile _blobcol) {
		LOGGER.debug("Create AllTypesWithoutSpace with information: {}" , allTypesWithoutSpace);

    allTypesWithoutSpace.setBlobcol(WMMultipartUtils.toByteArray(_blobcol));
		allTypesWithoutSpace = allTypesWithoutSpaceService.create(allTypesWithoutSpace);
		LOGGER.debug("Created AllTypesWithoutSpace with information: {}" , allTypesWithoutSpace);

	    return allTypesWithoutSpace;
	}

    @ApiOperation(value = "Returns the AllTypesWithoutSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesWithoutSpace getAllTypesWithoutSpace(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AllTypesWithoutSpace with id: {}" , id);

        AllTypesWithoutSpace foundAllTypesWithoutSpace = allTypesWithoutSpaceService.getById(id);
        LOGGER.debug("AllTypesWithoutSpace details with id: {}" , foundAllTypesWithoutSpace);

        return foundAllTypesWithoutSpace;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in AllTypesWithoutSpace instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getAllTypesWithoutSpaceBLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in AllTypesWithoutSpace instance" , fieldName);

        if(!WMRuntimeUtils.isLob(AllTypesWithoutSpace.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        AllTypesWithoutSpace allTypesWithoutSpace = allTypesWithoutSpaceService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(allTypesWithoutSpace, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the AllTypesWithoutSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesWithoutSpace editAllTypesWithoutSpace(@PathVariable("id") Integer id, @RequestBody AllTypesWithoutSpace allTypesWithoutSpace) throws EntityNotFoundException {
        LOGGER.debug("Editing AllTypesWithoutSpace with id: {}" , allTypesWithoutSpace.getPkid());

        allTypesWithoutSpace.setPkid(id);
        allTypesWithoutSpace = allTypesWithoutSpaceService.update(allTypesWithoutSpace);
        LOGGER.debug("AllTypesWithoutSpace details with id: {}" , allTypesWithoutSpace);

        return allTypesWithoutSpace;
    }

    @ApiOperation(value = "Updates the AllTypesWithoutSpace instance associated with the given id.This API should be used when AllTypesWithoutSpace instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public AllTypesWithoutSpace editAllTypesWithoutSpace(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        AllTypesWithoutSpace newAllTypesWithoutSpace = WMMultipartUtils.toObject(multipartHttpServletRequest, AllTypesWithoutSpace.class, "dbscenarios");
        newAllTypesWithoutSpace.setPkid(id);

        AllTypesWithoutSpace oldAllTypesWithoutSpace = allTypesWithoutSpaceService.getById(id);
        WMMultipartUtils.updateLobsContent(oldAllTypesWithoutSpace, newAllTypesWithoutSpace);
        LOGGER.debug("Updating AllTypesWithoutSpace with information: {}" , newAllTypesWithoutSpace);

        return allTypesWithoutSpaceService.update(newAllTypesWithoutSpace);
    }

    @ApiOperation(value = "Deletes the AllTypesWithoutSpace instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteAllTypesWithoutSpace(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AllTypesWithoutSpace with id: {}" , id);

        AllTypesWithoutSpace deletedAllTypesWithoutSpace = allTypesWithoutSpaceService.delete(id);

        return deletedAllTypesWithoutSpace != null;
    }

    /**
     * @deprecated Use {@link #findAllTypesWithoutSpaces(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of AllTypesWithoutSpace instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesWithoutSpace> searchAllTypesWithoutSpacesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering AllTypesWithoutSpaces list");
        return allTypesWithoutSpaceService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypesWithoutSpace instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesWithoutSpace> findAllTypesWithoutSpaces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypesWithoutSpaces list");
        return allTypesWithoutSpaceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of AllTypesWithoutSpace instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<AllTypesWithoutSpace> filterAllTypesWithoutSpaces(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering AllTypesWithoutSpaces list");
        return allTypesWithoutSpaceService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportAllTypesWithoutSpaces(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return allTypesWithoutSpaceService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of AllTypesWithoutSpace instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countAllTypesWithoutSpaces( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting AllTypesWithoutSpaces");
		return allTypesWithoutSpaceService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getAllTypesWithoutSpaceAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return allTypesWithoutSpaceService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service AllTypesWithoutSpaceService instance
	 */
	protected void setAllTypesWithoutSpaceService(AllTypesWithoutSpaceService service) {
		this.allTypesWithoutSpaceService = service;
	}

}

