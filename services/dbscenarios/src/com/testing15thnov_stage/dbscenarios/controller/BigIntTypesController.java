/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.BigIntTypes;
import com.testing15thnov_stage.dbscenarios.service.BigIntTypesService;


/**
 * Controller object for domain model class BigIntTypes.
 * @see BigIntTypes
 */
@RestController("dbscenarios.BigIntTypesController")
@Api(value = "BigIntTypesController", description = "Exposes APIs to work with BigIntTypes resource.")
@RequestMapping("/dbscenarios/BigIntTypes")
public class BigIntTypesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntTypesController.class);

    @Autowired
	@Qualifier("dbscenarios.BigIntTypesService")
	private BigIntTypesService bigIntTypesService;

	@ApiOperation(value = "Creates a new BigIntTypes instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public BigIntTypes createBigIntTypes(@RequestBody BigIntTypes bigIntTypes) {
		LOGGER.debug("Create BigIntTypes with information: {}" , bigIntTypes);

		bigIntTypes = bigIntTypesService.create(bigIntTypes);
		LOGGER.debug("Created BigIntTypes with information: {}" , bigIntTypes);

	    return bigIntTypes;
	}

    @ApiOperation(value = "Returns the BigIntTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BigIntTypes getBigIntTypes(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Getting BigIntTypes with id: {}" , id);

        BigIntTypes foundBigIntTypes = bigIntTypesService.getById(id);
        LOGGER.debug("BigIntTypes details with id: {}" , foundBigIntTypes);

        return foundBigIntTypes;
    }

    @ApiOperation(value = "Updates the BigIntTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public BigIntTypes editBigIntTypes(@PathVariable("id") Long id, @RequestBody BigIntTypes bigIntTypes) throws EntityNotFoundException {
        LOGGER.debug("Editing BigIntTypes with id: {}" , bigIntTypes.getSignedDefault());

        bigIntTypes.setSignedDefault(id);
        bigIntTypes = bigIntTypesService.update(bigIntTypes);
        LOGGER.debug("BigIntTypes details with id: {}" , bigIntTypes);

        return bigIntTypes;
    }

    @ApiOperation(value = "Deletes the BigIntTypes instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteBigIntTypes(@PathVariable("id") Long id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigIntTypes with id: {}" , id);

        BigIntTypes deletedBigIntTypes = bigIntTypesService.delete(id);

        return deletedBigIntTypes != null;
    }

    /**
     * @deprecated Use {@link #findBigIntTypes(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of BigIntTypes instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigIntTypes> searchBigIntTypesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering BigIntTypes list");
        return bigIntTypesService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BigIntTypes instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigIntTypes> findBigIntTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BigIntTypes list");
        return bigIntTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of BigIntTypes instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<BigIntTypes> filterBigIntTypes(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering BigIntTypes list");
        return bigIntTypesService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportBigIntTypes(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return bigIntTypesService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of BigIntTypes instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countBigIntTypes( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting BigIntTypes");
		return bigIntTypesService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getBigIntTypesAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return bigIntTypesService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service BigIntTypesService instance
	 */
	protected void setBigIntTypesService(BigIntTypesService service) {
		this.bigIntTypesService = service;
	}

}

