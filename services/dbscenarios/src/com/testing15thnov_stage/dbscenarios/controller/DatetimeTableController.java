/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.DatetimeTable;
import com.testing15thnov_stage.dbscenarios.service.DatetimeTableService;


/**
 * Controller object for domain model class DatetimeTable.
 * @see DatetimeTable
 */
@RestController("dbscenarios.DatetimeTableController")
@Api(value = "DatetimeTableController", description = "Exposes APIs to work with DatetimeTable resource.")
@RequestMapping("/dbscenarios/DatetimeTable")
public class DatetimeTableController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeTableController.class);

    @Autowired
	@Qualifier("dbscenarios.DatetimeTableService")
	private DatetimeTableService datetimeTableService;

	@ApiOperation(value = "Creates a new DatetimeTable instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public DatetimeTable createDatetimeTable(@RequestBody DatetimeTable datetimeTable) {
		LOGGER.debug("Create DatetimeTable with information: {}" , datetimeTable);

		datetimeTable = datetimeTableService.create(datetimeTable);
		LOGGER.debug("Created DatetimeTable with information: {}" , datetimeTable);

	    return datetimeTable;
	}

    @ApiOperation(value = "Returns the DatetimeTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatetimeTable getDatetimeTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DatetimeTable with id: {}" , id);

        DatetimeTable foundDatetimeTable = datetimeTableService.getById(id);
        LOGGER.debug("DatetimeTable details with id: {}" , foundDatetimeTable);

        return foundDatetimeTable;
    }

    @ApiOperation(value = "Updates the DatetimeTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DatetimeTable editDatetimeTable(@PathVariable("id") Integer id, @RequestBody DatetimeTable datetimeTable) throws EntityNotFoundException {
        LOGGER.debug("Editing DatetimeTable with id: {}" , datetimeTable.getId());

        datetimeTable.setId(id);
        datetimeTable = datetimeTableService.update(datetimeTable);
        LOGGER.debug("DatetimeTable details with id: {}" , datetimeTable);

        return datetimeTable;
    }

    @ApiOperation(value = "Deletes the DatetimeTable instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteDatetimeTable(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeTable with id: {}" , id);

        DatetimeTable deletedDatetimeTable = datetimeTableService.delete(id);

        return deletedDatetimeTable != null;
    }

    /**
     * @deprecated Use {@link #findDatetimeTables(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of DatetimeTable instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeTable> searchDatetimeTablesByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering DatetimeTables list");
        return datetimeTableService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatetimeTable instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeTable> findDatetimeTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatetimeTables list");
        return datetimeTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of DatetimeTable instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<DatetimeTable> filterDatetimeTables(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering DatetimeTables list");
        return datetimeTableService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportDatetimeTables(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return datetimeTableService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of DatetimeTable instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countDatetimeTables( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting DatetimeTables");
		return datetimeTableService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getDatetimeTableAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return datetimeTableService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DatetimeTableService instance
	 */
	protected void setDatetimeTableService(DatetimeTableService service) {
		this.datetimeTableService = service;
	}

}

