/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.PersonBackup1;
import com.testing15thnov_stage.dbscenarios.PersonBackup1Id;
import com.testing15thnov_stage.dbscenarios.service.PersonBackup1Service;


/**
 * Controller object for domain model class PersonBackup1.
 * @see PersonBackup1
 */
@RestController("dbscenarios.PersonBackup1Controller")
@Api(value = "PersonBackup1Controller", description = "Exposes APIs to work with PersonBackup1 resource.")
@RequestMapping("/dbscenarios/PersonBackup1")
public class PersonBackup1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackup1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.PersonBackup1Service")
	private PersonBackup1Service personBackup1Service;

	@ApiOperation(value = "Creates a new PersonBackup1 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PersonBackup1 createPersonBackup1(@RequestBody PersonBackup1 personBackup1) {
		LOGGER.debug("Create PersonBackup1 with information: {}" , personBackup1);

		personBackup1 = personBackup1Service.create(personBackup1);
		LOGGER.debug("Created PersonBackup1 with information: {}" , personBackup1);

	    return personBackup1;
	}

@ApiOperation(value = "Returns the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 getPersonBackup1(@RequestParam("pid") Integer pid,@RequestParam("lastName") String lastName,@RequestParam("firstName") String firstName,@RequestParam("address") String address,@RequestParam("city") String city) throws EntityNotFoundException {

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);

        LOGGER.debug("Getting PersonBackup1 with id: {}" , personbackup1Id);
        PersonBackup1 personBackup1 = personBackup1Service.getById(personbackup1Id);
        LOGGER.debug("PersonBackup1 details with id: {}" , personBackup1);

        return personBackup1;
    }



    @ApiOperation(value = "Updates the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup1 editPersonBackup1(@RequestParam("pid") Integer pid,@RequestParam("lastName") String lastName,@RequestParam("firstName") String firstName,@RequestParam("address") String address,@RequestParam("city") String city, @RequestBody PersonBackup1 personBackup1) throws EntityNotFoundException {

        personBackup1.setPid(pid);
        personBackup1.setLastName(lastName);
        personBackup1.setFirstName(firstName);
        personBackup1.setAddress(address);
        personBackup1.setCity(city);

        LOGGER.debug("PersonBackup1 details with id is updated with: {}" , personBackup1);

        return personBackup1Service.update(personBackup1);
    }


    @ApiOperation(value = "Deletes the PersonBackup1 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonBackup1(@RequestParam("pid") Integer pid,@RequestParam("lastName") String lastName,@RequestParam("firstName") String firstName,@RequestParam("address") String address,@RequestParam("city") String city) throws EntityNotFoundException {

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(pid);
        personbackup1Id.setLastName(lastName);
        personbackup1Id.setFirstName(firstName);
        personbackup1Id.setAddress(address);
        personbackup1Id.setCity(city);

        LOGGER.debug("Deleting PersonBackup1 with id: {}" , personbackup1Id);
        PersonBackup1 personBackup1 = personBackup1Service.delete(personbackup1Id);

        return personBackup1 != null;
    }


    /**
     * @deprecated Use {@link #findPersonBackup1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PersonBackup1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> searchPersonBackup1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PersonBackup1s list");
        return personBackup1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> findPersonBackup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackup1s list");
        return personBackup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup1> filterPersonBackup1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackup1s list");
        return personBackup1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonBackup1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personBackup1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PersonBackup1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonBackup1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PersonBackup1s");
		return personBackup1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonBackup1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personBackup1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonBackup1Service instance
	 */
	protected void setPersonBackup1Service(PersonBackup1Service service) {
		this.personBackup1Service = service;
	}

}

