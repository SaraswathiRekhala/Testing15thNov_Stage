/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.PersonBackup;
import com.testing15thnov_stage.dbscenarios.service.PersonBackupService;


/**
 * Controller object for domain model class PersonBackup.
 * @see PersonBackup
 */
@RestController("dbscenarios.PersonBackupController")
@Api(value = "PersonBackupController", description = "Exposes APIs to work with PersonBackup resource.")
@RequestMapping("/dbscenarios/PersonBackup")
public class PersonBackupController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackupController.class);

    @Autowired
	@Qualifier("dbscenarios.PersonBackupService")
	private PersonBackupService personBackupService;

	@ApiOperation(value = "Creates a new PersonBackup instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public PersonBackup createPersonBackup(@RequestBody PersonBackup personBackup) {
		LOGGER.debug("Create PersonBackup with information: {}" , personBackup);

		personBackup = personBackupService.create(personBackup);
		LOGGER.debug("Created PersonBackup with information: {}" , personBackup);

	    return personBackup;
	}

    @ApiOperation(value = "Returns the PersonBackup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup getPersonBackup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting PersonBackup with id: {}" , id);

        PersonBackup foundPersonBackup = personBackupService.getById(id);
        LOGGER.debug("PersonBackup details with id: {}" , foundPersonBackup);

        return foundPersonBackup;
    }

    @ApiOperation(value = "Updates the PersonBackup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public PersonBackup editPersonBackup(@PathVariable("id") Integer id, @RequestBody PersonBackup personBackup) throws EntityNotFoundException {
        LOGGER.debug("Editing PersonBackup with id: {}" , personBackup.getPid());

        personBackup.setPid(id);
        personBackup = personBackupService.update(personBackup);
        LOGGER.debug("PersonBackup details with id: {}" , personBackup);

        return personBackup;
    }

    @ApiOperation(value = "Deletes the PersonBackup instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deletePersonBackup(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PersonBackup with id: {}" , id);

        PersonBackup deletedPersonBackup = personBackupService.delete(id);

        return deletedPersonBackup != null;
    }

    /**
     * @deprecated Use {@link #findPersonBackups(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of PersonBackup instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup> searchPersonBackupsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering PersonBackups list");
        return personBackupService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup> findPersonBackups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackups list");
        return personBackupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of PersonBackup instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonBackup> filterPersonBackups(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering PersonBackups list");
        return personBackupService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportPersonBackups(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return personBackupService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of PersonBackup instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countPersonBackups( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting PersonBackups");
		return personBackupService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getPersonBackupAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return personBackupService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonBackupService instance
	 */
	protected void setPersonBackupService(PersonBackupService service) {
		this.personBackupService = service;
	}

}

