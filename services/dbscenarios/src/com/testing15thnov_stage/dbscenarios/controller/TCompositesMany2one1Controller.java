/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.TCompositesMany2one1;
import com.testing15thnov_stage.dbscenarios.service.TCompositesMany2one1Service;


/**
 * Controller object for domain model class TCompositesMany2one1.
 * @see TCompositesMany2one1
 */
@RestController("dbscenarios.TCompositesMany2one1Controller")
@Api(value = "TCompositesMany2one1Controller", description = "Exposes APIs to work with TCompositesMany2one1 resource.")
@RequestMapping("/dbscenarios/TCompositesMany2one1")
public class TCompositesMany2one1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCompositesMany2one1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TCompositesMany2one1Service")
	private TCompositesMany2one1Service tCompositesMany2one1Service;

	@ApiOperation(value = "Creates a new TCompositesMany2one1 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TCompositesMany2one1 createTCompositesMany2one1(@RequestBody TCompositesMany2one1 tcompositesMany2one1) {
		LOGGER.debug("Create TCompositesMany2one1 with information: {}" , tcompositesMany2one1);

		tcompositesMany2one1 = tCompositesMany2one1Service.create(tcompositesMany2one1);
		LOGGER.debug("Created TCompositesMany2one1 with information: {}" , tcompositesMany2one1);

	    return tcompositesMany2one1;
	}

    @ApiOperation(value = "Returns the TCompositesMany2one1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCompositesMany2one1 getTCompositesMany2one1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TCompositesMany2one1 with id: {}" , id);

        TCompositesMany2one1 foundTCompositesMany2one1 = tCompositesMany2one1Service.getById(id);
        LOGGER.debug("TCompositesMany2one1 details with id: {}" , foundTCompositesMany2one1);

        return foundTCompositesMany2one1;
    }

    @ApiOperation(value = "Updates the TCompositesMany2one1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TCompositesMany2one1 editTCompositesMany2one1(@PathVariable("id") Integer id, @RequestBody TCompositesMany2one1 tcompositesMany2one1) throws EntityNotFoundException {
        LOGGER.debug("Editing TCompositesMany2one1 with id: {}" , tcompositesMany2one1.getId());

        tcompositesMany2one1.setId(id);
        tcompositesMany2one1 = tCompositesMany2one1Service.update(tcompositesMany2one1);
        LOGGER.debug("TCompositesMany2one1 details with id: {}" , tcompositesMany2one1);

        return tcompositesMany2one1;
    }

    @ApiOperation(value = "Deletes the TCompositesMany2one1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTCompositesMany2one1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TCompositesMany2one1 with id: {}" , id);

        TCompositesMany2one1 deletedTCompositesMany2one1 = tCompositesMany2one1Service.delete(id);

        return deletedTCompositesMany2one1 != null;
    }

    /**
     * @deprecated Use {@link #findTCompositesMany2one1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TCompositesMany2one1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCompositesMany2one1> searchTCompositesMany2one1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TCompositesMany2one1s list");
        return tCompositesMany2one1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCompositesMany2one1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCompositesMany2one1> findTCompositesMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCompositesMany2one1s list");
        return tCompositesMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TCompositesMany2one1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TCompositesMany2one1> filterTCompositesMany2one1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TCompositesMany2one1s list");
        return tCompositesMany2one1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTCompositesMany2one1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tCompositesMany2one1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TCompositesMany2one1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTCompositesMany2one1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TCompositesMany2one1s");
		return tCompositesMany2one1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTCompositesMany2one1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tCompositesMany2one1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TCompositesMany2one1Service instance
	 */
	protected void setTCompositesMany2one1Service(TCompositesMany2one1Service service) {
		this.tCompositesMany2one1Service = service;
	}

}

