/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.TOne2oneP;
import com.testing15thnov_stage.dbscenarios.service.TOne2onePService;


/**
 * Controller object for domain model class TOne2oneP.
 * @see TOne2oneP
 */
@RestController("dbscenarios.TOne2onePController")
@Api(value = "TOne2onePController", description = "Exposes APIs to work with TOne2oneP resource.")
@RequestMapping("/dbscenarios/TOne2oneP")
public class TOne2onePController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TOne2onePController.class);

    @Autowired
	@Qualifier("dbscenarios.TOne2onePService")
	private TOne2onePService tOne2onePService;

	@ApiOperation(value = "Creates a new TOne2oneP instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TOne2oneP createTOne2oneP(@RequestPart("wm_data_json") TOne2oneP tone2oneP, @RequestPart(value = "blobCol", required = false) MultipartFile _blobCol) {
		LOGGER.debug("Create TOne2oneP with information: {}" , tone2oneP);

    tone2oneP.setBlobCol(WMMultipartUtils.toByteArray(_blobCol));
		tone2oneP = tOne2onePService.create(tone2oneP);
		LOGGER.debug("Created TOne2oneP with information: {}" , tone2oneP);

	    return tone2oneP;
	}

    @ApiOperation(value = "Returns the TOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TOne2oneP getTOne2oneP(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting TOne2oneP with id: {}" , id);

        TOne2oneP foundTOne2oneP = tOne2onePService.getById(id);
        LOGGER.debug("TOne2oneP details with id: {}" , foundTOne2oneP);

        return foundTOne2oneP;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in TOne2oneP instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTOne2onePBLOBContent(@PathVariable("id") Short id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in TOne2oneP instance" , fieldName);

        if(!WMRuntimeUtils.isLob(TOne2oneP.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        TOne2oneP tone2oneP = tOne2onePService.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(tone2oneP, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the TOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TOne2oneP editTOne2oneP(@PathVariable("id") Short id, @RequestBody TOne2oneP tone2oneP) throws EntityNotFoundException {
        LOGGER.debug("Editing TOne2oneP with id: {}" , tone2oneP.getByteCol());

        tone2oneP.setByteCol(id);
        tone2oneP = tOne2onePService.update(tone2oneP);
        LOGGER.debug("TOne2oneP details with id: {}" , tone2oneP);

        return tone2oneP;
    }

    @ApiOperation(value = "Updates the TOne2oneP instance associated with the given id.This API should be used when TOne2oneP instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TOne2oneP editTOne2oneP(@PathVariable("id") Short id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        TOne2oneP newTOne2oneP = WMMultipartUtils.toObject(multipartHttpServletRequest, TOne2oneP.class, "dbscenarios");
        newTOne2oneP.setByteCol(id);

        TOne2oneP oldTOne2oneP = tOne2onePService.getById(id);
        WMMultipartUtils.updateLobsContent(oldTOne2oneP, newTOne2oneP);
        LOGGER.debug("Updating TOne2oneP with information: {}" , newTOne2oneP);

        return tOne2onePService.update(newTOne2oneP);
    }

    @ApiOperation(value = "Deletes the TOne2oneP instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTOne2oneP(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TOne2oneP with id: {}" , id);

        TOne2oneP deletedTOne2oneP = tOne2onePService.delete(id);

        return deletedTOne2oneP != null;
    }

    @RequestMapping(value = "/serialCol/{serialCol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TOne2oneP with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TOne2oneP getBySerialCol(@PathVariable("serialCol") long serialCol) {
        LOGGER.debug("Getting TOne2oneP with uniques key SerialCol");
        return tOne2onePService.getBySerialCol(serialCol);
    }

    /**
     * @deprecated Use {@link #findTOne2onePs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TOne2oneP instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TOne2oneP> searchTOne2onePsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TOne2onePs list");
        return tOne2onePService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TOne2oneP instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TOne2oneP> findTOne2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TOne2onePs list");
        return tOne2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TOne2oneP instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TOne2oneP> filterTOne2onePs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TOne2onePs list");
        return tOne2onePService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTOne2onePs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tOne2onePService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TOne2oneP instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTOne2onePs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TOne2onePs");
		return tOne2onePService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTOne2onePAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tOne2onePService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TOne2onePService instance
	 */
	protected void setTOne2onePService(TOne2onePService service) {
		this.tOne2onePService = service;
	}

}

