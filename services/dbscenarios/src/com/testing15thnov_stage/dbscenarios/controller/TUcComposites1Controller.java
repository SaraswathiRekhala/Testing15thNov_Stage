/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.TUcComposites1;
import com.testing15thnov_stage.dbscenarios.service.TUcComposites1Service;


/**
 * Controller object for domain model class TUcComposites1.
 * @see TUcComposites1
 */
@RestController("dbscenarios.TUcComposites1Controller")
@Api(value = "TUcComposites1Controller", description = "Exposes APIs to work with TUcComposites1 resource.")
@RequestMapping("/dbscenarios/TUcComposites1")
public class TUcComposites1Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcComposites1Controller.class);

    @Autowired
	@Qualifier("dbscenarios.TUcComposites1Service")
	private TUcComposites1Service tUcComposites1Service;

	@ApiOperation(value = "Creates a new TUcComposites1 instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TUcComposites1 createTUcComposites1(@RequestPart("wm_data_json") TUcComposites1 tucComposites1, @RequestPart(value = "column6", required = false) MultipartFile _column6) {
		LOGGER.debug("Create TUcComposites1 with information: {}" , tucComposites1);

    tucComposites1.setColumn6(WMMultipartUtils.toByteArray(_column6));
		tucComposites1 = tUcComposites1Service.create(tucComposites1);
		LOGGER.debug("Created TUcComposites1 with information: {}" , tucComposites1);

	    return tucComposites1;
	}

    @ApiOperation(value = "Returns the TUcComposites1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites1 getTUcComposites1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TUcComposites1 with id: {}" , id);

        TUcComposites1 foundTUcComposites1 = tUcComposites1Service.getById(id);
        LOGGER.debug("TUcComposites1 details with id: {}" , foundTUcComposites1);

        return foundTUcComposites1;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in TUcComposites1 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTUcComposites1BLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in TUcComposites1 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(TUcComposites1.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        TUcComposites1 tucComposites1 = tUcComposites1Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(tucComposites1, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the TUcComposites1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites1 editTUcComposites1(@PathVariable("id") Integer id, @RequestBody TUcComposites1 tucComposites1) throws EntityNotFoundException {
        LOGGER.debug("Editing TUcComposites1 with id: {}" , tucComposites1.getId());

        tucComposites1.setId(id);
        tucComposites1 = tUcComposites1Service.update(tucComposites1);
        LOGGER.debug("TUcComposites1 details with id: {}" , tucComposites1);

        return tucComposites1;
    }

    @ApiOperation(value = "Updates the TUcComposites1 instance associated with the given id.This API should be used when TUcComposites1 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites1 editTUcComposites1(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        TUcComposites1 newTUcComposites1 = WMMultipartUtils.toObject(multipartHttpServletRequest, TUcComposites1.class, "dbscenarios");
        newTUcComposites1.setId(id);

        TUcComposites1 oldTUcComposites1 = tUcComposites1Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldTUcComposites1, newTUcComposites1);
        LOGGER.debug("Updating TUcComposites1 with information: {}" , newTUcComposites1);

        return tUcComposites1Service.update(newTUcComposites1);
    }

    @ApiOperation(value = "Deletes the TUcComposites1 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcComposites1(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TUcComposites1 with id: {}" , id);

        TUcComposites1 deletedTUcComposites1 = tUcComposites1Service.delete(id);

        return deletedTUcComposites1 != null;
    }

    @RequestMapping(value = "/byteCol-charCol-shortCol-stringCol", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TUcComposites1 with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcComposites1 getByByteColAndCharColAndShortColAndStringCol(@RequestParam("byteCol") Short byteCol, @RequestParam("charCol") String charCol, @RequestParam("shortCol") Short shortCol, @RequestParam("stringCol") String stringCol) {
        LOGGER.debug("Getting TUcComposites1 with uniques key ByteColAndCharColAndShortColAndStringCol");
        return tUcComposites1Service.getByByteColAndCharColAndShortColAndStringCol(byteCol, charCol, shortCol, stringCol);
    }

    /**
     * @deprecated Use {@link #findTUcComposites1s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcComposites1 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposites1> searchTUcComposites1sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcComposites1s list");
        return tUcComposites1Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposites1 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposites1> findTUcComposites1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposites1s list");
        return tUcComposites1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcComposites1 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcComposites1> filterTUcComposites1s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcComposites1s list");
        return tUcComposites1Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcComposites1s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcComposites1Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TUcComposites1 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcComposites1s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcComposites1s");
		return tUcComposites1Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcComposites1AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcComposites1Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcComposites1Service instance
	 */
	protected void setTUcComposites1Service(TUcComposites1Service service) {
		this.tUcComposites1Service = service;
	}

}

