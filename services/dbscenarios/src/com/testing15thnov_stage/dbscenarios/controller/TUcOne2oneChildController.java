/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.TUcOne2oneChild;
import com.testing15thnov_stage.dbscenarios.service.TUcOne2oneChildService;


/**
 * Controller object for domain model class TUcOne2oneChild.
 * @see TUcOne2oneChild
 */
@RestController("dbscenarios.TUcOne2oneChildController")
@Api(value = "TUcOne2oneChildController", description = "Exposes APIs to work with TUcOne2oneChild resource.")
@RequestMapping("/dbscenarios/TUcOne2oneChild")
public class TUcOne2oneChildController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2oneChildController.class);

    @Autowired
	@Qualifier("dbscenarios.TUcOne2oneChildService")
	private TUcOne2oneChildService tUcOne2oneChildService;

	@ApiOperation(value = "Creates a new TUcOne2oneChild instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TUcOne2oneChild createTUcOne2oneChild(@RequestBody TUcOne2oneChild tucOne2oneChild) {
		LOGGER.debug("Create TUcOne2oneChild with information: {}" , tucOne2oneChild);

		tucOne2oneChild = tUcOne2oneChildService.create(tucOne2oneChild);
		LOGGER.debug("Created TUcOne2oneChild with information: {}" , tucOne2oneChild);

	    return tucOne2oneChild;
	}

    @ApiOperation(value = "Returns the TUcOne2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneChild getTUcOne2oneChild(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Getting TUcOne2oneChild with id: {}" , id);

        TUcOne2oneChild foundTUcOne2oneChild = tUcOne2oneChildService.getById(id);
        LOGGER.debug("TUcOne2oneChild details with id: {}" , foundTUcOne2oneChild);

        return foundTUcOne2oneChild;
    }

    @ApiOperation(value = "Updates the TUcOne2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneChild editTUcOne2oneChild(@PathVariable("id") Short id, @RequestBody TUcOne2oneChild tucOne2oneChild) throws EntityNotFoundException {
        LOGGER.debug("Editing TUcOne2oneChild with id: {}" , tucOne2oneChild.getShortid());

        tucOne2oneChild.setShortid(id);
        tucOne2oneChild = tUcOne2oneChildService.update(tucOne2oneChild);
        LOGGER.debug("TUcOne2oneChild details with id: {}" , tucOne2oneChild);

        return tucOne2oneChild;
    }

    @ApiOperation(value = "Deletes the TUcOne2oneChild instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcOne2oneChild(@PathVariable("id") Short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TUcOne2oneChild with id: {}" , id);

        TUcOne2oneChild deletedTUcOne2oneChild = tUcOne2oneChildService.delete(id);

        return deletedTUcOne2oneChild != null;
    }

    /**
     * @deprecated Use {@link #findTUcOne2oneChilds(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcOne2oneChild instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneChild> searchTUcOne2oneChildsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcOne2oneChilds list");
        return tUcOne2oneChildService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneChild instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneChild> findTUcOne2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2oneChilds list");
        return tUcOne2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneChild instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneChild> filterTUcOne2oneChilds(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2oneChilds list");
        return tUcOne2oneChildService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcOne2oneChilds(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcOne2oneChildService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TUcOne2oneChild instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcOne2oneChilds( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcOne2oneChilds");
		return tUcOne2oneChildService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcOne2oneChildAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcOne2oneChildService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcOne2oneChildService instance
	 */
	protected void setTUcOne2oneChildService(TUcOne2oneChildService service) {
		this.tUcOne2oneChildService = service;
	}

}

