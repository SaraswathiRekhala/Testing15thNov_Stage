/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.TUcOne2oneParent;
import com.testing15thnov_stage.dbscenarios.service.TUcOne2oneParentService;


/**
 * Controller object for domain model class TUcOne2oneParent.
 * @see TUcOne2oneParent
 */
@RestController("dbscenarios.TUcOne2oneParentController")
@Api(value = "TUcOne2oneParentController", description = "Exposes APIs to work with TUcOne2oneParent resource.")
@RequestMapping("/dbscenarios/TUcOne2oneParent")
public class TUcOne2oneParentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TUcOne2oneParentController.class);

    @Autowired
	@Qualifier("dbscenarios.TUcOne2oneParentService")
	private TUcOne2oneParentService tUcOne2oneParentService;

	@ApiOperation(value = "Creates a new TUcOne2oneParent instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public TUcOne2oneParent createTUcOne2oneParent(@RequestBody TUcOne2oneParent tucOne2oneParent) {
		LOGGER.debug("Create TUcOne2oneParent with information: {}" , tucOne2oneParent);

		tucOne2oneParent = tUcOne2oneParentService.create(tucOne2oneParent);
		LOGGER.debug("Created TUcOne2oneParent with information: {}" , tucOne2oneParent);

	    return tucOne2oneParent;
	}

    @ApiOperation(value = "Returns the TUcOne2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneParent getTUcOne2oneParent(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TUcOne2oneParent with id: {}" , id);

        TUcOne2oneParent foundTUcOne2oneParent = tUcOne2oneParentService.getById(id);
        LOGGER.debug("TUcOne2oneParent details with id: {}" , foundTUcOne2oneParent);

        return foundTUcOne2oneParent;
    }

    @ApiOperation(value = "Updates the TUcOne2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneParent editTUcOne2oneParent(@PathVariable("id") Integer id, @RequestBody TUcOne2oneParent tucOne2oneParent) throws EntityNotFoundException {
        LOGGER.debug("Editing TUcOne2oneParent with id: {}" , tucOne2oneParent.getPkId());

        tucOne2oneParent.setPkId(id);
        tucOne2oneParent = tUcOne2oneParentService.update(tucOne2oneParent);
        LOGGER.debug("TUcOne2oneParent details with id: {}" , tucOne2oneParent);

        return tucOne2oneParent;
    }

    @ApiOperation(value = "Deletes the TUcOne2oneParent instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTUcOne2oneParent(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TUcOne2oneParent with id: {}" , id);

        TUcOne2oneParent deletedTUcOne2oneParent = tUcOne2oneParentService.delete(id);

        return deletedTUcOne2oneParent != null;
    }

    @RequestMapping(value = "/shortCol/{shortCol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching TUcOne2oneParent with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public TUcOne2oneParent getByShortCol(@PathVariable("shortCol") Short shortCol) {
        LOGGER.debug("Getting TUcOne2oneParent with uniques key ShortCol");
        return tUcOne2oneParentService.getByShortCol(shortCol);
    }

    /**
     * @deprecated Use {@link #findTUcOne2oneParents(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of TUcOne2oneParent instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneParent> searchTUcOne2oneParentsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering TUcOne2oneParents list");
        return tUcOne2oneParentService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneParent instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneParent> findTUcOne2oneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2oneParents list");
        return tUcOne2oneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of TUcOne2oneParent instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<TUcOne2oneParent> filterTUcOne2oneParents(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering TUcOne2oneParents list");
        return tUcOne2oneParentService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTUcOne2oneParents(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return tUcOne2oneParentService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of TUcOne2oneParent instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTUcOne2oneParents( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting TUcOne2oneParents");
		return tUcOne2oneParentService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTUcOne2oneParentAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return tUcOne2oneParentService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TUcOne2oneParentService instance
	 */
	protected void setTUcOne2oneParentService(TUcOne2oneParentService service) {
		this.tUcOne2oneParentService = service;
	}

}

