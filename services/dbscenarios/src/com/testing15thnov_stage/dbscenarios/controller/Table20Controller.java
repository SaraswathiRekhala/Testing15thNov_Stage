/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.Table20;
import com.testing15thnov_stage.dbscenarios.service.Table20Service;


/**
 * Controller object for domain model class Table20.
 * @see Table20
 */
@RestController("dbscenarios.Table20Controller")
@Api(value = "Table20Controller", description = "Exposes APIs to work with Table20 resource.")
@RequestMapping("/dbscenarios/Table20")
public class Table20Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table20Controller.class);

    @Autowired
	@Qualifier("dbscenarios.Table20Service")
	private Table20Service table20Service;

	@ApiOperation(value = "Creates a new Table20 instance.")
@RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table20 createTable20(@RequestPart("wm_data_json") Table20 table20, @RequestPart(value = "column5", required = false) MultipartFile _column5) {
		LOGGER.debug("Create Table20 with information: {}" , table20);

    table20.setColumn5(WMMultipartUtils.toByteArray(_column5));
		table20 = table20Service.create(table20);
		LOGGER.debug("Created Table20 with information: {}" , table20);

	    return table20;
	}

    @ApiOperation(value = "Returns the Table20 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20 getTable20(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table20 with id: {}" , id);

        Table20 foundTable20 = table20Service.getById(id);
        LOGGER.debug("Table20 details with id: {}" , foundTable20);

        return foundTable20;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Table20 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTable20BLOBContent(@PathVariable("id") Integer id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Table20 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Table20.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Table20 table20 = table20Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(table20, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Table20 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20 editTable20(@PathVariable("id") Integer id, @RequestBody Table20 table20) throws EntityNotFoundException {
        LOGGER.debug("Editing Table20 with id: {}" , table20.getId());

        table20.setId(id);
        table20 = table20Service.update(table20);
        LOGGER.debug("Table20 details with id: {}" , table20);

        return table20;
    }

    @ApiOperation(value = "Updates the Table20 instance associated with the given id.This API should be used when Table20 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table20 editTable20(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Table20 newTable20 = WMMultipartUtils.toObject(multipartHttpServletRequest, Table20.class, "dbscenarios");
        newTable20.setId(id);

        Table20 oldTable20 = table20Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldTable20, newTable20);
        LOGGER.debug("Updating Table20 with information: {}" , newTable20);

        return table20Service.update(newTable20);
    }

    @ApiOperation(value = "Deletes the Table20 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable20(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table20 with id: {}" , id);

        Table20 deletedTable20 = table20Service.delete(id);

        return deletedTable20 != null;
    }

    /**
     * @deprecated Use {@link #findTable20s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table20 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20> searchTable20sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table20s list");
        return table20Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table20 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20> findTable20s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table20s list");
        return table20Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table20 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20> filterTable20s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table20s list");
        return table20Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable20s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table20Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table20 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable20s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table20s");
		return table20Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable20AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table20Service.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/table20sForColumn3", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the table20sForColumn3 instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table20> findAssociatedTable20sForColumn3(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated table20sForColumn3");
        return table20Service.findAssociatedTable20sForColumn3(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table20Service instance
	 */
	protected void setTable20Service(Table20Service service) {
		this.table20Service = service;
	}

}

