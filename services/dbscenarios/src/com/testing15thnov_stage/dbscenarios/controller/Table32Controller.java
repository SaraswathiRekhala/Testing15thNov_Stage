/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.Table32;
import com.testing15thnov_stage.dbscenarios.service.Table32Service;


/**
 * Controller object for domain model class Table32.
 * @see Table32
 */
@RestController("dbscenarios.Table32Controller")
@Api(value = "Table32Controller", description = "Exposes APIs to work with Table32 resource.")
@RequestMapping("/dbscenarios/Table32")
public class Table32Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table32Controller.class);

    @Autowired
	@Qualifier("dbscenarios.Table32Service")
	private Table32Service table32Service;

	@ApiOperation(value = "Creates a new Table32 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table32 createTable32(@RequestBody Table32 table32) {
		LOGGER.debug("Create Table32 with information: {}" , table32);

		table32 = table32Service.create(table32);
		LOGGER.debug("Created Table32 with information: {}" , table32);

	    return table32;
	}

    @ApiOperation(value = "Returns the Table32 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table32 getTable32(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table32 with id: {}" , id);

        Table32 foundTable32 = table32Service.getById(id);
        LOGGER.debug("Table32 details with id: {}" , foundTable32);

        return foundTable32;
    }

    @ApiOperation(value = "Updates the Table32 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table32 editTable32(@PathVariable("id") String id, @RequestBody Table32 table32) throws EntityNotFoundException {
        LOGGER.debug("Editing Table32 with id: {}" , table32.getId());

        table32.setId(id);
        table32 = table32Service.update(table32);
        LOGGER.debug("Table32 details with id: {}" , table32);

        return table32;
    }

    @ApiOperation(value = "Deletes the Table32 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable32(@PathVariable("id") String id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table32 with id: {}" , id);

        Table32 deletedTable32 = table32Service.delete(id);

        return deletedTable32 != null;
    }

    /**
     * @deprecated Use {@link #findTable32s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table32 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table32> searchTable32sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table32s list");
        return table32Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table32 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table32> findTable32s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table32s list");
        return table32Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table32 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table32> filterTable32s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table32s list");
        return table32Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable32s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table32Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table32 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable32s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table32s");
		return table32Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable32AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table32Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table32Service instance
	 */
	protected void setTable32Service(Table32Service service) {
		this.table32Service = service;
	}

}

