/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.Table36;
import com.testing15thnov_stage.dbscenarios.service.Table36Service;


/**
 * Controller object for domain model class Table36.
 * @see Table36
 */
@RestController("dbscenarios.Table36Controller")
@Api(value = "Table36Controller", description = "Exposes APIs to work with Table36 resource.")
@RequestMapping("/dbscenarios/Table36")
public class Table36Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table36Controller.class);

    @Autowired
	@Qualifier("dbscenarios.Table36Service")
	private Table36Service table36Service;

	@ApiOperation(value = "Creates a new Table36 instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Table36 createTable36(@RequestBody Table36 table36) {
		LOGGER.debug("Create Table36 with information: {}" , table36);

		table36 = table36Service.create(table36);
		LOGGER.debug("Created Table36 with information: {}" , table36);

	    return table36;
	}

    @ApiOperation(value = "Returns the Table36 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table36 getTable36(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table36 with id: {}" , id);

        Table36 foundTable36 = table36Service.getById(id);
        LOGGER.debug("Table36 details with id: {}" , foundTable36);

        return foundTable36;
    }

    @ApiOperation(value = "Updates the Table36 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Table36 editTable36(@PathVariable("id") Integer id, @RequestBody Table36 table36) throws EntityNotFoundException {
        LOGGER.debug("Editing Table36 with id: {}" , table36.getId());

        table36.setId(id);
        table36 = table36Service.update(table36);
        LOGGER.debug("Table36 details with id: {}" , table36);

        return table36;
    }

    @ApiOperation(value = "Deletes the Table36 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTable36(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table36 with id: {}" , id);

        Table36 deletedTable36 = table36Service.delete(id);

        return deletedTable36 != null;
    }

    /**
     * @deprecated Use {@link #findTable36s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Table36 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table36> searchTable36sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table36s list");
        return table36Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table36 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table36> findTable36s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table36s list");
        return table36Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Table36 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Table36> filterTable36s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Table36s list");
        return table36Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTable36s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return table36Service.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Table36 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTable36s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Table36s");
		return table36Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTable36AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return table36Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table36Service instance
	 */
	protected void setTable36Service(Table36Service service) {
		this.table36Service = service;
	}

}

