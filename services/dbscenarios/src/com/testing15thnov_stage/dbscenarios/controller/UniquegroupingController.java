/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.sql.Date;
import java.util.Map;

import org.joda.time.LocalDateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.testing15thnov_stage.dbscenarios.Uniquegrouping;
import com.testing15thnov_stage.dbscenarios.service.UniquegroupingService;


/**
 * Controller object for domain model class Uniquegrouping.
 * @see Uniquegrouping
 */
@RestController("dbscenarios.UniquegroupingController")
@Api(value = "UniquegroupingController", description = "Exposes APIs to work with Uniquegrouping resource.")
@RequestMapping("/dbscenarios/Uniquegrouping")
public class UniquegroupingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UniquegroupingController.class);

    @Autowired
	@Qualifier("dbscenarios.UniquegroupingService")
	private UniquegroupingService uniquegroupingService;

	@ApiOperation(value = "Creates a new Uniquegrouping instance.")
@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
public Uniquegrouping createUniquegrouping(@RequestBody Uniquegrouping uniquegrouping) {
		LOGGER.debug("Create Uniquegrouping with information: {}" , uniquegrouping);

		uniquegrouping = uniquegroupingService.create(uniquegrouping);
		LOGGER.debug("Created Uniquegrouping with information: {}" , uniquegrouping);

	    return uniquegrouping;
	}

    @ApiOperation(value = "Returns the Uniquegrouping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Uniquegrouping getUniquegrouping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Uniquegrouping with id: {}" , id);

        Uniquegrouping foundUniquegrouping = uniquegroupingService.getById(id);
        LOGGER.debug("Uniquegrouping details with id: {}" , foundUniquegrouping);

        return foundUniquegrouping;
    }

    @ApiOperation(value = "Updates the Uniquegrouping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Uniquegrouping editUniquegrouping(@PathVariable("id") Integer id, @RequestBody Uniquegrouping uniquegrouping) throws EntityNotFoundException {
        LOGGER.debug("Editing Uniquegrouping with id: {}" , uniquegrouping.getId());

        uniquegrouping.setId(id);
        uniquegrouping = uniquegroupingService.update(uniquegrouping);
        LOGGER.debug("Uniquegrouping details with id: {}" , uniquegrouping);

        return uniquegrouping;
    }

    @ApiOperation(value = "Deletes the Uniquegrouping instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUniquegrouping(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Uniquegrouping with id: {}" , id);

        Uniquegrouping deletedUniquegrouping = uniquegroupingService.delete(id);

        return deletedUniquegrouping != null;
    }

    @RequestMapping(value = "/datecol-charcol", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Uniquegrouping with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Uniquegrouping getByDatecolAndCharcol(@RequestParam("datecol") Date datecol, @RequestParam("charcol") String charcol) {
        LOGGER.debug("Getting Uniquegrouping with uniques key DatecolAndCharcol");
        return uniquegroupingService.getByDatecolAndCharcol(datecol, charcol);
    }

    @RequestMapping(value = "/stringcol/{stringcol}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Uniquegrouping with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Uniquegrouping getByStringcol(@PathVariable("stringcol") String stringcol) {
        LOGGER.debug("Getting Uniquegrouping with uniques key Stringcol");
        return uniquegroupingService.getByStringcol(stringcol);
    }

    @RequestMapping(value = "/datecol-charcol-datetimecol", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the matching Uniquegrouping with given unique key values.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Uniquegrouping getByDatecolAndCharcolAndDatetimecol(@RequestParam("datecol") Date datecol, @RequestParam("charcol") String charcol, @RequestParam("datetimecol") LocalDateTime datetimecol) {
        LOGGER.debug("Getting Uniquegrouping with uniques key DatecolAndCharcolAndDatetimecol");
        return uniquegroupingService.getByDatecolAndCharcolAndDatetimecol(datecol, charcol, datetimecol);
    }

    /**
     * @deprecated Use {@link #findUniquegroupings(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Uniquegrouping instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Uniquegrouping> searchUniquegroupingsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Uniquegroupings list");
        return uniquegroupingService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Uniquegrouping instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Uniquegrouping> findUniquegroupings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Uniquegroupings list");
        return uniquegroupingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Uniquegrouping instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Uniquegrouping> filterUniquegroupings(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Uniquegroupings list");
        return uniquegroupingService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUniquegroupings(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return uniquegroupingService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of Uniquegrouping instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUniquegroupings( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Uniquegroupings");
		return uniquegroupingService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUniquegroupingAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return uniquegroupingService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UniquegroupingService instance
	 */
	protected void setUniquegroupingService(UniquegroupingService service) {
		this.uniquegroupingService = service;
	}

}

