/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Account;


/**
 * ServiceImpl object for domain model class Account.
 *
 * @see Account
 */
@Service("dbscenarios.AccountService")
@Validated
public class AccountServiceImpl implements AccountService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AccountServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AccountDao")
    private WMGenericDao<Account, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Account, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public Account create(Account account) {
        LOGGER.debug("Creating a new Account with information: {}", account);
        Account accountCreated = this.wmGenericDao.create(account);
        return accountCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Account getById(Integer accountId) throws EntityNotFoundException {
        LOGGER.debug("Finding Account by id: {}", accountId);
        Account account = this.wmGenericDao.findById(accountId);
        if (account == null){
            LOGGER.debug("No Account found with id: {}", accountId);
            throw new EntityNotFoundException(String.valueOf(accountId));
        }
        return account;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Account findById(Integer accountId) {
        LOGGER.debug("Finding Account by id: {}", accountId);
        return this.wmGenericDao.findById(accountId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public Account update(Account account) throws EntityNotFoundException {
        LOGGER.debug("Updating Account with information: {}", account);
        this.wmGenericDao.update(account);

        Integer accountId = account.getAcctNum();

        return this.wmGenericDao.findById(accountId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public Account delete(Integer accountId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Account with id: {}", accountId);
        Account deleted = this.wmGenericDao.findById(accountId);
        if (deleted == null) {
            LOGGER.debug("No Account found with id: {}", accountId);
            throw new EntityNotFoundException(String.valueOf(accountId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<Account> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Account> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Accounts");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Account to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

