/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.AllExternalTypes;


/**
 * ServiceImpl object for domain model class AllExternalTypes.
 *
 * @see AllExternalTypes
 */
@Service("dbscenarios.AllExternalTypesService")
@Validated
public class AllExternalTypesServiceImpl implements AllExternalTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AllExternalTypesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AllExternalTypesDao")
    private WMGenericDao<AllExternalTypes, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AllExternalTypes, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public AllExternalTypes create(AllExternalTypes allExternalTypes) {
        LOGGER.debug("Creating a new AllExternalTypes with information: {}", allExternalTypes);
        AllExternalTypes allExternalTypesCreated = this.wmGenericDao.create(allExternalTypes);
        return allExternalTypesCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public AllExternalTypes getById(Integer allexternaltypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding AllExternalTypes by id: {}", allexternaltypesId);
        AllExternalTypes allExternalTypes = this.wmGenericDao.findById(allexternaltypesId);
        if (allExternalTypes == null){
            LOGGER.debug("No AllExternalTypes found with id: {}", allexternaltypesId);
            throw new EntityNotFoundException(String.valueOf(allexternaltypesId));
        }
        return allExternalTypes;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public AllExternalTypes findById(Integer allexternaltypesId) {
        LOGGER.debug("Finding AllExternalTypes by id: {}", allexternaltypesId);
        return this.wmGenericDao.findById(allexternaltypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public AllExternalTypes update(AllExternalTypes allExternalTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating AllExternalTypes with information: {}", allExternalTypes);
        this.wmGenericDao.update(allExternalTypes);

        Integer allexternaltypesId = allExternalTypes.getIntCol();

        return this.wmGenericDao.findById(allexternaltypesId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public AllExternalTypes delete(Integer allexternaltypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AllExternalTypes with id: {}", allexternaltypesId);
        AllExternalTypes deleted = this.wmGenericDao.findById(allexternaltypesId);
        if (deleted == null) {
            LOGGER.debug("No AllExternalTypes found with id: {}", allexternaltypesId);
            throw new EntityNotFoundException(String.valueOf(allexternaltypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<AllExternalTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AllExternalTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AllExternalTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AllExternalTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table AllExternalTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

