/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.AutoWireProcedure1000nullTitles;


/**
 * ServiceImpl object for domain model class AutoWireProcedure1000nullTitles.
 *
 * @see AutoWireProcedure1000nullTitles
 */
@Service("dbscenarios.AutoWireProcedure1000nullTitlesService")
@Validated
public class AutoWireProcedure1000nullTitlesServiceImpl implements AutoWireProcedure1000nullTitlesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(AutoWireProcedure1000nullTitlesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.AutoWireProcedure1000nullTitlesDao")
    private WMGenericDao<AutoWireProcedure1000nullTitles, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AutoWireProcedure1000nullTitles, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public AutoWireProcedure1000nullTitles create(AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) {
        LOGGER.debug("Creating a new AutoWireProcedure1000nullTitles with information: {}", autoWireProcedure1000nullTitles);
        AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitlesCreated = this.wmGenericDao.create(autoWireProcedure1000nullTitles);
        return autoWireProcedure1000nullTitlesCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public AutoWireProcedure1000nullTitles getById(Integer autowireprocedure1000nulltitlesId) throws EntityNotFoundException {
        LOGGER.debug("Finding AutoWireProcedure1000nullTitles by id: {}", autowireprocedure1000nulltitlesId);
        AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles = this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
        if (autoWireProcedure1000nullTitles == null){
            LOGGER.debug("No AutoWireProcedure1000nullTitles found with id: {}", autowireprocedure1000nulltitlesId);
            throw new EntityNotFoundException(String.valueOf(autowireprocedure1000nulltitlesId));
        }
        return autoWireProcedure1000nullTitles;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public AutoWireProcedure1000nullTitles findById(Integer autowireprocedure1000nulltitlesId) {
        LOGGER.debug("Finding AutoWireProcedure1000nullTitles by id: {}", autowireprocedure1000nulltitlesId);
        return this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public AutoWireProcedure1000nullTitles update(AutoWireProcedure1000nullTitles autoWireProcedure1000nullTitles) throws EntityNotFoundException {
        LOGGER.debug("Updating AutoWireProcedure1000nullTitles with information: {}", autoWireProcedure1000nullTitles);
        this.wmGenericDao.update(autoWireProcedure1000nullTitles);

        Integer autowireprocedure1000nulltitlesId = autoWireProcedure1000nullTitles.getId();

        return this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public AutoWireProcedure1000nullTitles delete(Integer autowireprocedure1000nulltitlesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting AutoWireProcedure1000nullTitles with id: {}", autowireprocedure1000nulltitlesId);
        AutoWireProcedure1000nullTitles deleted = this.wmGenericDao.findById(autowireprocedure1000nulltitlesId);
        if (deleted == null) {
            LOGGER.debug("No AutoWireProcedure1000nullTitles found with id: {}", autowireprocedure1000nulltitlesId);
            throw new EntityNotFoundException(String.valueOf(autowireprocedure1000nulltitlesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<AutoWireProcedure1000nullTitles> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all AutoWireProcedure1000nullTitles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<AutoWireProcedure1000nullTitles> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all AutoWireProcedure1000nullTitles");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table AutoWireProcedure1000nullTitles to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

