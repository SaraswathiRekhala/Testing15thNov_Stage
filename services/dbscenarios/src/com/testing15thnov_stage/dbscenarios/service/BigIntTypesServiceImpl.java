/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.BigIntTypes;


/**
 * ServiceImpl object for domain model class BigIntTypes.
 *
 * @see BigIntTypes
 */
@Service("dbscenarios.BigIntTypesService")
@Validated
public class BigIntTypesServiceImpl implements BigIntTypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BigIntTypesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.BigIntTypesDao")
    private WMGenericDao<BigIntTypes, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BigIntTypes, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public BigIntTypes create(BigIntTypes bigIntTypes) {
        LOGGER.debug("Creating a new BigIntTypes with information: {}", bigIntTypes);
        BigIntTypes bigIntTypesCreated = this.wmGenericDao.create(bigIntTypes);
        return bigIntTypesCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public BigIntTypes getById(Long biginttypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding BigIntTypes by id: {}", biginttypesId);
        BigIntTypes bigIntTypes = this.wmGenericDao.findById(biginttypesId);
        if (bigIntTypes == null){
            LOGGER.debug("No BigIntTypes found with id: {}", biginttypesId);
            throw new EntityNotFoundException(String.valueOf(biginttypesId));
        }
        return bigIntTypes;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public BigIntTypes findById(Long biginttypesId) {
        LOGGER.debug("Finding BigIntTypes by id: {}", biginttypesId);
        return this.wmGenericDao.findById(biginttypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public BigIntTypes update(BigIntTypes bigIntTypes) throws EntityNotFoundException {
        LOGGER.debug("Updating BigIntTypes with information: {}", bigIntTypes);
        this.wmGenericDao.update(bigIntTypes);

        Long biginttypesId = bigIntTypes.getSignedDefault();

        return this.wmGenericDao.findById(biginttypesId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public BigIntTypes delete(Long biginttypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BigIntTypes with id: {}", biginttypesId);
        BigIntTypes deleted = this.wmGenericDao.findById(biginttypesId);
        if (deleted == null) {
            LOGGER.debug("No BigIntTypes found with id: {}", biginttypesId);
            throw new EntityNotFoundException(String.valueOf(biginttypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<BigIntTypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BigIntTypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<BigIntTypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BigIntTypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table BigIntTypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

