/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.BlobtableProcedure;


/**
 * ServiceImpl object for domain model class BlobtableProcedure.
 *
 * @see BlobtableProcedure
 */
@Service("dbscenarios.BlobtableProcedureService")
@Validated
public class BlobtableProcedureServiceImpl implements BlobtableProcedureService {

    private static final Logger LOGGER = LoggerFactory.getLogger(BlobtableProcedureServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.BlobtableProcedureDao")
    private WMGenericDao<BlobtableProcedure, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BlobtableProcedure, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public BlobtableProcedure create(BlobtableProcedure blobtableProcedure) {
        LOGGER.debug("Creating a new BlobtableProcedure with information: {}", blobtableProcedure);
        BlobtableProcedure blobtableProcedureCreated = this.wmGenericDao.create(blobtableProcedure);
        return blobtableProcedureCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public BlobtableProcedure getById(Integer blobtableprocedureId) throws EntityNotFoundException {
        LOGGER.debug("Finding BlobtableProcedure by id: {}", blobtableprocedureId);
        BlobtableProcedure blobtableProcedure = this.wmGenericDao.findById(blobtableprocedureId);
        if (blobtableProcedure == null){
            LOGGER.debug("No BlobtableProcedure found with id: {}", blobtableprocedureId);
            throw new EntityNotFoundException(String.valueOf(blobtableprocedureId));
        }
        return blobtableProcedure;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public BlobtableProcedure findById(Integer blobtableprocedureId) {
        LOGGER.debug("Finding BlobtableProcedure by id: {}", blobtableprocedureId);
        return this.wmGenericDao.findById(blobtableprocedureId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public BlobtableProcedure update(BlobtableProcedure blobtableProcedure) throws EntityNotFoundException {
        LOGGER.debug("Updating BlobtableProcedure with information: {}", blobtableProcedure);
        this.wmGenericDao.update(blobtableProcedure);

        Integer blobtableprocedureId = blobtableProcedure.getPkid();

        return this.wmGenericDao.findById(blobtableprocedureId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public BlobtableProcedure delete(Integer blobtableprocedureId) throws EntityNotFoundException {
        LOGGER.debug("Deleting BlobtableProcedure with id: {}", blobtableprocedureId);
        BlobtableProcedure deleted = this.wmGenericDao.findById(blobtableprocedureId);
        if (deleted == null) {
            LOGGER.debug("No BlobtableProcedure found with id: {}", blobtableprocedureId);
            throw new EntityNotFoundException(String.valueOf(blobtableprocedureId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<BlobtableProcedure> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all BlobtableProcedures");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<BlobtableProcedure> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all BlobtableProcedures");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table BlobtableProcedure to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

