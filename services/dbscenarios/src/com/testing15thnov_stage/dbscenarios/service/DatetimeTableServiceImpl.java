/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.DatetimeTable;


/**
 * ServiceImpl object for domain model class DatetimeTable.
 *
 * @see DatetimeTable
 */
@Service("dbscenarios.DatetimeTableService")
@Validated
public class DatetimeTableServiceImpl implements DatetimeTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(DatetimeTableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.DatetimeTableDao")
    private WMGenericDao<DatetimeTable, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DatetimeTable, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public DatetimeTable create(DatetimeTable datetimeTable) {
        LOGGER.debug("Creating a new DatetimeTable with information: {}", datetimeTable);
        DatetimeTable datetimeTableCreated = this.wmGenericDao.create(datetimeTable);
        return datetimeTableCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public DatetimeTable getById(Integer datetimetableId) throws EntityNotFoundException {
        LOGGER.debug("Finding DatetimeTable by id: {}", datetimetableId);
        DatetimeTable datetimeTable = this.wmGenericDao.findById(datetimetableId);
        if (datetimeTable == null){
            LOGGER.debug("No DatetimeTable found with id: {}", datetimetableId);
            throw new EntityNotFoundException(String.valueOf(datetimetableId));
        }
        return datetimeTable;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public DatetimeTable findById(Integer datetimetableId) {
        LOGGER.debug("Finding DatetimeTable by id: {}", datetimetableId);
        return this.wmGenericDao.findById(datetimetableId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public DatetimeTable update(DatetimeTable datetimeTable) throws EntityNotFoundException {
        LOGGER.debug("Updating DatetimeTable with information: {}", datetimeTable);
        this.wmGenericDao.update(datetimeTable);

        Integer datetimetableId = datetimeTable.getId();

        return this.wmGenericDao.findById(datetimetableId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public DatetimeTable delete(Integer datetimetableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting DatetimeTable with id: {}", datetimetableId);
        DatetimeTable deleted = this.wmGenericDao.findById(datetimetableId);
        if (deleted == null) {
            LOGGER.debug("No DatetimeTable found with id: {}", datetimetableId);
            throw new EntityNotFoundException(String.valueOf(datetimetableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<DatetimeTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all DatetimeTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<DatetimeTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all DatetimeTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table DatetimeTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

