/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.PersonBackup1;
import com.testing15thnov_stage.dbscenarios.PersonBackup1Id;

/**
 * Service object for domain model class {@link PersonBackup1}.
 */
public interface PersonBackup1Service {

    /**
     * Creates a new PersonBackup1. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on PersonBackup1 if any.
     *
     * @param personBackup1 Details of the PersonBackup1 to be created; value cannot be null.
     * @return The newly created PersonBackup1.
     */
	PersonBackup1 create(@Valid PersonBackup1 personBackup1);


	/**
	 * Returns PersonBackup1 by given id if exists.
	 *
	 * @param personbackup1Id The id of the PersonBackup1 to get; value cannot be null.
	 * @return PersonBackup1 associated with the given personbackup1Id.
     * @throws EntityNotFoundException If no PersonBackup1 is found.
	 */
	PersonBackup1 getById(PersonBackup1Id personbackup1Id) throws EntityNotFoundException;

    /**
	 * Find and return the PersonBackup1 by given id if exists, returns null otherwise.
	 *
	 * @param personbackup1Id The id of the PersonBackup1 to get; value cannot be null.
	 * @return PersonBackup1 associated with the given personbackup1Id.
	 */
	PersonBackup1 findById(PersonBackup1Id personbackup1Id);


	/**
	 * Updates the details of an existing PersonBackup1. It replaces all fields of the existing PersonBackup1 with the given personBackup1.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on PersonBackup1 if any.
     *
	 * @param personBackup1 The details of the PersonBackup1 to be updated; value cannot be null.
	 * @return The updated PersonBackup1.
	 * @throws EntityNotFoundException if no PersonBackup1 is found with given input.
	 */
	PersonBackup1 update(@Valid PersonBackup1 personBackup1) throws EntityNotFoundException;

    /**
	 * Deletes an existing PersonBackup1 with the given id.
	 *
	 * @param personbackup1Id The id of the PersonBackup1 to be deleted; value cannot be null.
	 * @return The deleted PersonBackup1.
	 * @throws EntityNotFoundException if no PersonBackup1 found with the given id.
	 */
	PersonBackup1 delete(PersonBackup1Id personbackup1Id) throws EntityNotFoundException;

	/**
	 * Find all PersonBackup1s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PersonBackup1s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<PersonBackup1> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all PersonBackup1s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching PersonBackup1s.
     *
     * @see Pageable
     * @see Page
	 */
    Page<PersonBackup1> findAll(String query, Pageable pageable);

    /**
	 * Exports all PersonBackup1s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the PersonBackup1s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the PersonBackup1.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

