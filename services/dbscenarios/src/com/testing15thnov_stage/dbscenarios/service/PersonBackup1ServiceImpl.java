/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.PersonBackup1;
import com.testing15thnov_stage.dbscenarios.PersonBackup1Id;


/**
 * ServiceImpl object for domain model class PersonBackup1.
 *
 * @see PersonBackup1
 */
@Service("dbscenarios.PersonBackup1Service")
@Validated
public class PersonBackup1ServiceImpl implements PersonBackup1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackup1ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.PersonBackup1Dao")
    private WMGenericDao<PersonBackup1, PersonBackup1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonBackup1, PersonBackup1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public PersonBackup1 create(PersonBackup1 personBackup1) {
        LOGGER.debug("Creating a new PersonBackup1 with information: {}", personBackup1);
        PersonBackup1 personBackup1Created = this.wmGenericDao.create(personBackup1);
        return personBackup1Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup1 getById(PersonBackup1Id personbackup1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding PersonBackup1 by id: {}", personbackup1Id);
        PersonBackup1 personBackup1 = this.wmGenericDao.findById(personbackup1Id);
        if (personBackup1 == null){
            LOGGER.debug("No PersonBackup1 found with id: {}", personbackup1Id);
            throw new EntityNotFoundException(String.valueOf(personbackup1Id));
        }
        return personBackup1;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup1 findById(PersonBackup1Id personbackup1Id) {
        LOGGER.debug("Finding PersonBackup1 by id: {}", personbackup1Id);
        return this.wmGenericDao.findById(personbackup1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup1 update(PersonBackup1 personBackup1) throws EntityNotFoundException {
        LOGGER.debug("Updating PersonBackup1 with information: {}", personBackup1);
        this.wmGenericDao.update(personBackup1);

        PersonBackup1Id personbackup1Id = new PersonBackup1Id();
        personbackup1Id.setPid(personBackup1.getPid());
        personbackup1Id.setLastName(personBackup1.getLastName());
        personbackup1Id.setFirstName(personBackup1.getFirstName());
        personbackup1Id.setAddress(personBackup1.getAddress());
        personbackup1Id.setCity(personBackup1.getCity());

        return this.wmGenericDao.findById(personbackup1Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup1 delete(PersonBackup1Id personbackup1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting PersonBackup1 with id: {}", personbackup1Id);
        PersonBackup1 deleted = this.wmGenericDao.findById(personbackup1Id);
        if (deleted == null) {
            LOGGER.debug("No PersonBackup1 found with id: {}", personbackup1Id);
            throw new EntityNotFoundException(String.valueOf(personbackup1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<PersonBackup1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackup1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<PersonBackup1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackup1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table PersonBackup1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

