/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.PersonBackup;


/**
 * ServiceImpl object for domain model class PersonBackup.
 *
 * @see PersonBackup
 */
@Service("dbscenarios.PersonBackupService")
@Validated
public class PersonBackupServiceImpl implements PersonBackupService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonBackupServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.PersonBackupDao")
    private WMGenericDao<PersonBackup, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PersonBackup, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public PersonBackup create(PersonBackup personBackup) {
        LOGGER.debug("Creating a new PersonBackup with information: {}", personBackup);
        PersonBackup personBackupCreated = this.wmGenericDao.create(personBackup);
        return personBackupCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup getById(Integer personbackupId) throws EntityNotFoundException {
        LOGGER.debug("Finding PersonBackup by id: {}", personbackupId);
        PersonBackup personBackup = this.wmGenericDao.findById(personbackupId);
        if (personBackup == null){
            LOGGER.debug("No PersonBackup found with id: {}", personbackupId);
            throw new EntityNotFoundException(String.valueOf(personbackupId));
        }
        return personBackup;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup findById(Integer personbackupId) {
        LOGGER.debug("Finding PersonBackup by id: {}", personbackupId);
        return this.wmGenericDao.findById(personbackupId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup update(PersonBackup personBackup) throws EntityNotFoundException {
        LOGGER.debug("Updating PersonBackup with information: {}", personBackup);
        this.wmGenericDao.update(personBackup);

        Integer personbackupId = personBackup.getPid();

        return this.wmGenericDao.findById(personbackupId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public PersonBackup delete(Integer personbackupId) throws EntityNotFoundException {
        LOGGER.debug("Deleting PersonBackup with id: {}", personbackupId);
        PersonBackup deleted = this.wmGenericDao.findById(personbackupId);
        if (deleted == null) {
            LOGGER.debug("No PersonBackup found with id: {}", personbackupId);
            throw new EntityNotFoundException(String.valueOf(personbackupId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<PersonBackup> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackups");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<PersonBackup> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all PersonBackups");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table PersonBackup to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

