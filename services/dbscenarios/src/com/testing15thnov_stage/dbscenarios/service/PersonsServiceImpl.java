/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Persons;


/**
 * ServiceImpl object for domain model class Persons.
 *
 * @see Persons
 */
@Service("dbscenarios.PersonsService")
@Validated
public class PersonsServiceImpl implements PersonsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PersonsServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.PersonsDao")
    private WMGenericDao<Persons, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Persons, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public Persons create(Persons persons) {
        LOGGER.debug("Creating a new Persons with information: {}", persons);
        Persons personsCreated = this.wmGenericDao.create(persons);
        return personsCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Persons getById(Integer personsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Persons by id: {}", personsId);
        Persons persons = this.wmGenericDao.findById(personsId);
        if (persons == null){
            LOGGER.debug("No Persons found with id: {}", personsId);
            throw new EntityNotFoundException(String.valueOf(personsId));
        }
        return persons;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Persons findById(Integer personsId) {
        LOGGER.debug("Finding Persons by id: {}", personsId);
        return this.wmGenericDao.findById(personsId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public Persons update(Persons persons) throws EntityNotFoundException {
        LOGGER.debug("Updating Persons with information: {}", persons);
        this.wmGenericDao.update(persons);

        Integer personsId = persons.getPid();

        return this.wmGenericDao.findById(personsId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public Persons delete(Integer personsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Persons with id: {}", personsId);
        Persons deleted = this.wmGenericDao.findById(personsId);
        if (deleted == null) {
            LOGGER.debug("No Persons found with id: {}", personsId);
            throw new EntityNotFoundException(String.valueOf(personsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<Persons> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Persons");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Persons> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Persons");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Persons to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

