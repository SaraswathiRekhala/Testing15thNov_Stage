/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.TCompositesMany2one1;


/**
 * ServiceImpl object for domain model class TCompositesMany2one1.
 *
 * @see TCompositesMany2one1
 */
@Service("dbscenarios.TCompositesMany2one1Service")
@Validated
public class TCompositesMany2one1ServiceImpl implements TCompositesMany2one1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TCompositesMany2one1ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TCompositesMany2one1Dao")
    private WMGenericDao<TCompositesMany2one1, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TCompositesMany2one1, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TCompositesMany2one1 create(TCompositesMany2one1 tcompositesMany2one1) {
        LOGGER.debug("Creating a new TCompositesMany2one1 with information: {}", tcompositesMany2one1);
        TCompositesMany2one1 tcompositesMany2one1Created = this.wmGenericDao.create(tcompositesMany2one1);
        return tcompositesMany2one1Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TCompositesMany2one1 getById(Integer tcompositesmany2one1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding TCompositesMany2one1 by id: {}", tcompositesmany2one1Id);
        TCompositesMany2one1 tcompositesMany2one1 = this.wmGenericDao.findById(tcompositesmany2one1Id);
        if (tcompositesMany2one1 == null){
            LOGGER.debug("No TCompositesMany2one1 found with id: {}", tcompositesmany2one1Id);
            throw new EntityNotFoundException(String.valueOf(tcompositesmany2one1Id));
        }
        return tcompositesMany2one1;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TCompositesMany2one1 findById(Integer tcompositesmany2one1Id) {
        LOGGER.debug("Finding TCompositesMany2one1 by id: {}", tcompositesmany2one1Id);
        return this.wmGenericDao.findById(tcompositesmany2one1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TCompositesMany2one1 update(TCompositesMany2one1 tcompositesMany2one1) throws EntityNotFoundException {
        LOGGER.debug("Updating TCompositesMany2one1 with information: {}", tcompositesMany2one1);
        this.wmGenericDao.update(tcompositesMany2one1);

        Integer tcompositesmany2one1Id = tcompositesMany2one1.getId();

        return this.wmGenericDao.findById(tcompositesmany2one1Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TCompositesMany2one1 delete(Integer tcompositesmany2one1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TCompositesMany2one1 with id: {}", tcompositesmany2one1Id);
        TCompositesMany2one1 deleted = this.wmGenericDao.findById(tcompositesmany2one1Id);
        if (deleted == null) {
            LOGGER.debug("No TCompositesMany2one1 found with id: {}", tcompositesmany2one1Id);
            throw new EntityNotFoundException(String.valueOf(tcompositesmany2one1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TCompositesMany2one1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TCompositesMany2one1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TCompositesMany2one1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TCompositesMany2one1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TCompositesMany2one1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

