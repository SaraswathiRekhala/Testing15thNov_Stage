/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.TOne2oneComposites;
import com.testing15thnov_stage.dbscenarios.TOne2oneComposites1;
import com.testing15thnov_stage.dbscenarios.TOne2oneComposites1Id;


/**
 * ServiceImpl object for domain model class TOne2oneComposites1.
 *
 * @see TOne2oneComposites1
 */
@Service("dbscenarios.TOne2oneComposites1Service")
@Validated
public class TOne2oneComposites1ServiceImpl implements TOne2oneComposites1Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(TOne2oneComposites1ServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("dbscenarios.TOne2oneCompositesService")
	private TOne2oneCompositesService tOne2oneCompositesService;

    @Autowired
    @Qualifier("dbscenarios.TOne2oneComposites1Dao")
    private WMGenericDao<TOne2oneComposites1, TOne2oneComposites1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TOne2oneComposites1, TOne2oneComposites1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TOne2oneComposites1 create(TOne2oneComposites1 tone2oneComposites1) {
        LOGGER.debug("Creating a new TOne2oneComposites1 with information: {}", tone2oneComposites1);
        TOne2oneComposites1 tone2oneComposites1Created = this.wmGenericDao.create(tone2oneComposites1);
        if(tone2oneComposites1Created.getTone2oneComposites() != null) {
            TOne2oneComposites tone2oneComposites = tone2oneComposites1Created.getTone2oneComposites();
            LOGGER.debug("Creating a new child TOne2oneComposites with information: {}", tone2oneComposites);
            tone2oneComposites.setTone2oneComposites1(tone2oneComposites1Created);
            tOne2oneCompositesService.create(tone2oneComposites);
        }
        return tone2oneComposites1Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites1 getById(TOne2oneComposites1Id tone2onecomposites1Id) throws EntityNotFoundException {
        LOGGER.debug("Finding TOne2oneComposites1 by id: {}", tone2onecomposites1Id);
        TOne2oneComposites1 tone2oneComposites1 = this.wmGenericDao.findById(tone2onecomposites1Id);
        if (tone2oneComposites1 == null){
            LOGGER.debug("No TOne2oneComposites1 found with id: {}", tone2onecomposites1Id);
            throw new EntityNotFoundException(String.valueOf(tone2onecomposites1Id));
        }
        return tone2oneComposites1;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites1 findById(TOne2oneComposites1Id tone2onecomposites1Id) {
        LOGGER.debug("Finding TOne2oneComposites1 by id: {}", tone2onecomposites1Id);
        return this.wmGenericDao.findById(tone2onecomposites1Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites1 update(TOne2oneComposites1 tone2oneComposites1) throws EntityNotFoundException {
        LOGGER.debug("Updating TOne2oneComposites1 with information: {}", tone2oneComposites1);
        this.wmGenericDao.update(tone2oneComposites1);

        TOne2oneComposites1Id tone2onecomposites1Id = new TOne2oneComposites1Id();
        tone2onecomposites1Id.setByteId(tone2oneComposites1.getByteId());
        tone2onecomposites1Id.setShortId(tone2oneComposites1.getShortId());
        tone2onecomposites1Id.setCharId(tone2oneComposites1.getCharId());
        tone2onecomposites1Id.setStringId(tone2oneComposites1.getStringId());

        return this.wmGenericDao.findById(tone2onecomposites1Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites1 delete(TOne2oneComposites1Id tone2onecomposites1Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TOne2oneComposites1 with id: {}", tone2onecomposites1Id);
        TOne2oneComposites1 deleted = this.wmGenericDao.findById(tone2onecomposites1Id);
        if (deleted == null) {
            LOGGER.debug("No TOne2oneComposites1 found with id: {}", tone2onecomposites1Id);
            throw new EntityNotFoundException(String.valueOf(tone2onecomposites1Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TOne2oneComposites1> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneComposites1s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TOne2oneComposites1> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneComposites1s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TOne2oneComposites1 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service TOne2oneCompositesService instance
	 */
	protected void setTOne2oneCompositesService(TOne2oneCompositesService service) {
        this.tOne2oneCompositesService = service;
    }

}

