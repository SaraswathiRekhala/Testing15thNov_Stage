/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.TOne2oneComposites;
import com.testing15thnov_stage.dbscenarios.TOne2oneComposites1Id;


/**
 * ServiceImpl object for domain model class TOne2oneComposites.
 *
 * @see TOne2oneComposites
 */
@Service("dbscenarios.TOne2oneCompositesService")
@Validated
public class TOne2oneCompositesServiceImpl implements TOne2oneCompositesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TOne2oneCompositesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TOne2oneCompositesDao")
    private WMGenericDao<TOne2oneComposites, TOne2oneComposites1Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TOne2oneComposites, TOne2oneComposites1Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TOne2oneComposites create(TOne2oneComposites tone2oneComposites) {
        LOGGER.debug("Creating a new TOne2oneComposites with information: {}", tone2oneComposites);
        TOne2oneComposites tone2oneCompositesCreated = this.wmGenericDao.create(tone2oneComposites);
        return tone2oneCompositesCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites getById(TOne2oneComposites1Id tone2onecompositesId) throws EntityNotFoundException {
        LOGGER.debug("Finding TOne2oneComposites by id: {}", tone2onecompositesId);
        TOne2oneComposites tone2oneComposites = this.wmGenericDao.findById(tone2onecompositesId);
        if (tone2oneComposites == null){
            LOGGER.debug("No TOne2oneComposites found with id: {}", tone2onecompositesId);
            throw new EntityNotFoundException(String.valueOf(tone2onecompositesId));
        }
        return tone2oneComposites;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites findById(TOne2oneComposites1Id tone2onecompositesId) {
        LOGGER.debug("Finding TOne2oneComposites by id: {}", tone2onecompositesId);
        return this.wmGenericDao.findById(tone2onecompositesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites update(TOne2oneComposites tone2oneComposites) throws EntityNotFoundException {
        LOGGER.debug("Updating TOne2oneComposites with information: {}", tone2oneComposites);
        this.wmGenericDao.update(tone2oneComposites);

        TOne2oneComposites1Id tone2onecompositesId = new TOne2oneComposites1Id();
        tone2onecompositesId.setByteId(tone2oneComposites.getByteId());
        tone2onecompositesId.setShortId(tone2oneComposites.getShortId());
        tone2onecompositesId.setCharId(tone2oneComposites.getCharId());
        tone2onecompositesId.setStringId(tone2oneComposites.getStringId());

        return this.wmGenericDao.findById(tone2onecompositesId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TOne2oneComposites delete(TOne2oneComposites1Id tone2onecompositesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TOne2oneComposites with id: {}", tone2onecompositesId);
        TOne2oneComposites deleted = this.wmGenericDao.findById(tone2onecompositesId);
        if (deleted == null) {
            LOGGER.debug("No TOne2oneComposites found with id: {}", tone2onecompositesId);
            throw new EntityNotFoundException(String.valueOf(tone2onecompositesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TOne2oneComposites> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneComposites");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TOne2oneComposites> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TOne2oneComposites");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TOne2oneComposites to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

