/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.TUcOne2oneChild;

/**
 * Service object for domain model class {@link TUcOne2oneChild}.
 */
public interface TUcOne2oneChildService {

    /**
     * Creates a new TUcOne2oneChild. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on TUcOne2oneChild if any.
     *
     * @param tucOne2oneChild Details of the TUcOne2oneChild to be created; value cannot be null.
     * @return The newly created TUcOne2oneChild.
     */
	TUcOne2oneChild create(@Valid TUcOne2oneChild tucOne2oneChild);


	/**
	 * Returns TUcOne2oneChild by given id if exists.
	 *
	 * @param tucone2onechildId The id of the TUcOne2oneChild to get; value cannot be null.
	 * @return TUcOne2oneChild associated with the given tucone2onechildId.
     * @throws EntityNotFoundException If no TUcOne2oneChild is found.
	 */
	TUcOne2oneChild getById(Short tucone2onechildId) throws EntityNotFoundException;

    /**
	 * Find and return the TUcOne2oneChild by given id if exists, returns null otherwise.
	 *
	 * @param tucone2onechildId The id of the TUcOne2oneChild to get; value cannot be null.
	 * @return TUcOne2oneChild associated with the given tucone2onechildId.
	 */
	TUcOne2oneChild findById(Short tucone2onechildId);


	/**
	 * Updates the details of an existing TUcOne2oneChild. It replaces all fields of the existing TUcOne2oneChild with the given tucOne2oneChild.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on TUcOne2oneChild if any.
     *
	 * @param tucOne2oneChild The details of the TUcOne2oneChild to be updated; value cannot be null.
	 * @return The updated TUcOne2oneChild.
	 * @throws EntityNotFoundException if no TUcOne2oneChild is found with given input.
	 */
	TUcOne2oneChild update(@Valid TUcOne2oneChild tucOne2oneChild) throws EntityNotFoundException;

    /**
	 * Deletes an existing TUcOne2oneChild with the given id.
	 *
	 * @param tucone2onechildId The id of the TUcOne2oneChild to be deleted; value cannot be null.
	 * @return The deleted TUcOne2oneChild.
	 * @throws EntityNotFoundException if no TUcOne2oneChild found with the given id.
	 */
	TUcOne2oneChild delete(Short tucone2onechildId) throws EntityNotFoundException;

	/**
	 * Find all TUcOne2oneChilds matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcOne2oneChilds.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<TUcOne2oneChild> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all TUcOne2oneChilds matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching TUcOne2oneChilds.
     *
     * @see Pageable
     * @see Page
	 */
    Page<TUcOne2oneChild> findAll(String query, Pageable pageable);

    /**
	 * Exports all TUcOne2oneChilds matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the TUcOne2oneChilds in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the TUcOne2oneChild.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

