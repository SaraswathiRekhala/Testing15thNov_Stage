/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Table10;
import com.testing15thnov_stage.dbscenarios.Table11;
import com.testing15thnov_stage.dbscenarios.Table11Id;


/**
 * ServiceImpl object for domain model class Table11.
 *
 * @see Table11
 */
@Service("dbscenarios.Table11Service")
@Validated
public class Table11ServiceImpl implements Table11Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table11ServiceImpl.class);

    @Lazy
    @Autowired
	@Qualifier("dbscenarios.Table10Service")
	private Table10Service table10Service;

    @Autowired
    @Qualifier("dbscenarios.Table11Dao")
    private WMGenericDao<Table11, Table11Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table11, Table11Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public Table11 create(Table11 table11) {
        LOGGER.debug("Creating a new Table11 with information: {}", table11);
        Table11 table11Created = this.wmGenericDao.create(table11);
        if(table11Created.getTable10() != null) {
            Table10 table10 = table11Created.getTable10();
            LOGGER.debug("Creating a new child Table10 with information: {}", table10);
            table10.setTable11(table11Created);
            table10Service.create(table10);
        }
        return table11Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table11 getById(Table11Id table11Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table11 by id: {}", table11Id);
        Table11 table11 = this.wmGenericDao.findById(table11Id);
        if (table11 == null){
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        return table11;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table11 findById(Table11Id table11Id) {
        LOGGER.debug("Finding Table11 by id: {}", table11Id);
        return this.wmGenericDao.findById(table11Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public Table11 update(Table11 table11) throws EntityNotFoundException {
        LOGGER.debug("Updating Table11 with information: {}", table11);
        this.wmGenericDao.update(table11);

        Table11Id table11Id = new Table11Id();
        table11Id.setId(table11.getId());
        table11Id.setColumn2(table11.getColumn2());

        return this.wmGenericDao.findById(table11Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public Table11 delete(Table11Id table11Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table11 with id: {}", table11Id);
        Table11 deleted = this.wmGenericDao.findById(table11Id);
        if (deleted == null) {
            LOGGER.debug("No Table11 found with id: {}", table11Id);
            throw new EntityNotFoundException(String.valueOf(table11Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<Table11> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table11> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table11s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table11 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Table10Service instance
	 */
	protected void setTable10Service(Table10Service service) {
        this.table10Service = service;
    }

}

