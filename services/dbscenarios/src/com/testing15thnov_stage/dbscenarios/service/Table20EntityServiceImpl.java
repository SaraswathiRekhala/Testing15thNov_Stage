/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Table20Entity;


/**
 * ServiceImpl object for domain model class Table20Entity.
 *
 * @see Table20Entity
 */
@Service("dbscenarios.Table20EntityService")
@Validated
public class Table20EntityServiceImpl implements Table20EntityService {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table20EntityServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.Table20EntityDao")
    private WMGenericDao<Table20Entity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table20Entity, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public Table20Entity create(Table20Entity table20entity) {
        LOGGER.debug("Creating a new Table20Entity with information: {}", table20entity);
        Table20Entity table20entityCreated = this.wmGenericDao.create(table20entity);
        return table20entityCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table20Entity getById(Integer table20entityId) throws EntityNotFoundException {
        LOGGER.debug("Finding Table20Entity by id: {}", table20entityId);
        Table20Entity table20entity = this.wmGenericDao.findById(table20entityId);
        if (table20entity == null){
            LOGGER.debug("No Table20Entity found with id: {}", table20entityId);
            throw new EntityNotFoundException(String.valueOf(table20entityId));
        }
        return table20entity;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table20Entity findById(Integer table20entityId) {
        LOGGER.debug("Finding Table20Entity by id: {}", table20entityId);
        return this.wmGenericDao.findById(table20entityId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Table20Entity getByLastName(String lastName) {
        Map<String, Object> lastNameMap = new HashMap<>();
        lastNameMap.put("lastName", lastName);

        LOGGER.debug("Finding Table20Entity by unique keys: {}", lastNameMap);
        Table20Entity table20entity = this.wmGenericDao.findByUniqueKey(lastNameMap);

        if (table20entity == null){
            LOGGER.debug("No Table20Entity found with given unique key values: {}", lastNameMap);
            throw new EntityNotFoundException(String.valueOf(lastNameMap));
        }

        return table20entity;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public Table20Entity update(Table20Entity table20entity) throws EntityNotFoundException {
        LOGGER.debug("Updating Table20Entity with information: {}", table20entity);
        this.wmGenericDao.update(table20entity);

        Integer table20entityId = table20entity.getPid();

        return this.wmGenericDao.findById(table20entityId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public Table20Entity delete(Integer table20entityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table20Entity with id: {}", table20entityId);
        Table20Entity deleted = this.wmGenericDao.findById(table20entityId);
        if (deleted == null) {
            LOGGER.debug("No Table20Entity found with id: {}", table20entityId);
            throw new EntityNotFoundException(String.valueOf(table20entityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<Table20Entity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table20Entities");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table20Entity> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table20Entities");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table20Entity to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

