/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Table36;


/**
 * ServiceImpl object for domain model class Table36.
 *
 * @see Table36
 */
@Service("dbscenarios.Table36Service")
@Validated
public class Table36ServiceImpl implements Table36Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table36ServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.Table36Dao")
    private WMGenericDao<Table36, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table36, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public Table36 create(Table36 table36) {
        LOGGER.debug("Creating a new Table36 with information: {}", table36);
        Table36 table36Created = this.wmGenericDao.create(table36);
        return table36Created;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table36 getById(Integer table36Id) throws EntityNotFoundException {
        LOGGER.debug("Finding Table36 by id: {}", table36Id);
        Table36 table36 = this.wmGenericDao.findById(table36Id);
        if (table36 == null){
            LOGGER.debug("No Table36 found with id: {}", table36Id);
            throw new EntityNotFoundException(String.valueOf(table36Id));
        }
        return table36;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Table36 findById(Integer table36Id) {
        LOGGER.debug("Finding Table36 by id: {}", table36Id);
        return this.wmGenericDao.findById(table36Id);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public Table36 update(Table36 table36) throws EntityNotFoundException {
        LOGGER.debug("Updating Table36 with information: {}", table36);
        this.wmGenericDao.update(table36);

        Integer table36Id = table36.getId();

        return this.wmGenericDao.findById(table36Id);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public Table36 delete(Integer table36Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table36 with id: {}", table36Id);
        Table36 deleted = this.wmGenericDao.findById(table36Id);
        if (deleted == null) {
            LOGGER.debug("No Table36 found with id: {}", table36Id);
            throw new EntityNotFoundException(String.valueOf(table36Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<Table36> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table36s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<Table36> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table36s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table Table36 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

