/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.TimestampCol;


/**
 * ServiceImpl object for domain model class TimestampCol.
 *
 * @see TimestampCol
 */
@Service("dbscenarios.TimestampColService")
@Validated
public class TimestampColServiceImpl implements TimestampColService {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimestampColServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.TimestampColDao")
    private WMGenericDao<TimestampCol, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimestampCol, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public TimestampCol create(TimestampCol timestampCol) {
        LOGGER.debug("Creating a new TimestampCol with information: {}", timestampCol);
        TimestampCol timestampColCreated = this.wmGenericDao.create(timestampCol);
        return timestampColCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TimestampCol getById(Integer timestampcolId) throws EntityNotFoundException {
        LOGGER.debug("Finding TimestampCol by id: {}", timestampcolId);
        TimestampCol timestampCol = this.wmGenericDao.findById(timestampcolId);
        if (timestampCol == null){
            LOGGER.debug("No TimestampCol found with id: {}", timestampcolId);
            throw new EntityNotFoundException(String.valueOf(timestampcolId));
        }
        return timestampCol;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public TimestampCol findById(Integer timestampcolId) {
        LOGGER.debug("Finding TimestampCol by id: {}", timestampcolId);
        return this.wmGenericDao.findById(timestampcolId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public TimestampCol update(TimestampCol timestampCol) throws EntityNotFoundException {
        LOGGER.debug("Updating TimestampCol with information: {}", timestampCol);
        this.wmGenericDao.update(timestampCol);

        Integer timestampcolId = timestampCol.getId();

        return this.wmGenericDao.findById(timestampcolId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public TimestampCol delete(Integer timestampcolId) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimestampCol with id: {}", timestampcolId);
        TimestampCol deleted = this.wmGenericDao.findById(timestampcolId);
        if (deleted == null) {
            LOGGER.debug("No TimestampCol found with id: {}", timestampcolId);
            throw new EntityNotFoundException(String.valueOf(timestampcolId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<TimestampCol> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all TimestampCols");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<TimestampCol> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all TimestampCols");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table TimestampCol to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

