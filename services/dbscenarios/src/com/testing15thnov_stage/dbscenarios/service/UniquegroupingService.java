/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import javax.validation.Valid;

import org.joda.time.LocalDateTime;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.Uniquegrouping;

/**
 * Service object for domain model class {@link Uniquegrouping}.
 */
public interface UniquegroupingService {

    /**
     * Creates a new Uniquegrouping. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Uniquegrouping if any.
     *
     * @param uniquegrouping Details of the Uniquegrouping to be created; value cannot be null.
     * @return The newly created Uniquegrouping.
     */
	Uniquegrouping create(@Valid Uniquegrouping uniquegrouping);


	/**
	 * Returns Uniquegrouping by given id if exists.
	 *
	 * @param uniquegroupingId The id of the Uniquegrouping to get; value cannot be null.
	 * @return Uniquegrouping associated with the given uniquegroupingId.
     * @throws EntityNotFoundException If no Uniquegrouping is found.
	 */
	Uniquegrouping getById(Integer uniquegroupingId) throws EntityNotFoundException;

    /**
	 * Find and return the Uniquegrouping by given id if exists, returns null otherwise.
	 *
	 * @param uniquegroupingId The id of the Uniquegrouping to get; value cannot be null.
	 * @return Uniquegrouping associated with the given uniquegroupingId.
	 */
	Uniquegrouping findById(Integer uniquegroupingId);

    /**
	 * Find and return the Uniquegrouping for given datecol  andcharcol  if exists.
	 *
	 * @param datecol value of datecol; value cannot be null.
	 * @param charcol value of charcol; value cannot be null.
	 * @return Uniquegrouping associated with the given inputs.
     * @throws EntityNotFoundException if no matching Uniquegrouping found.
	 */
    Uniquegrouping getByDatecolAndCharcol(Date datecol, String charcol)throws EntityNotFoundException;

    /**
	 * Find and return the Uniquegrouping for given stringcol  if exists.
	 *
	 * @param stringcol value of stringcol; value cannot be null.
	 * @return Uniquegrouping associated with the given inputs.
     * @throws EntityNotFoundException if no matching Uniquegrouping found.
	 */
    Uniquegrouping getByStringcol(String stringcol)throws EntityNotFoundException;

    /**
	 * Find and return the Uniquegrouping for given datecol  andcharcol  anddatetimecol  if exists.
	 *
	 * @param datecol value of datecol; value cannot be null.
	 * @param charcol value of charcol; value cannot be null.
	 * @param datetimecol value of datetimecol; value cannot be null.
	 * @return Uniquegrouping associated with the given inputs.
     * @throws EntityNotFoundException if no matching Uniquegrouping found.
	 */
    Uniquegrouping getByDatecolAndCharcolAndDatetimecol(Date datecol, String charcol, LocalDateTime datetimecol)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing Uniquegrouping. It replaces all fields of the existing Uniquegrouping with the given uniquegrouping.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on Uniquegrouping if any.
     *
	 * @param uniquegrouping The details of the Uniquegrouping to be updated; value cannot be null.
	 * @return The updated Uniquegrouping.
	 * @throws EntityNotFoundException if no Uniquegrouping is found with given input.
	 */
	Uniquegrouping update(@Valid Uniquegrouping uniquegrouping) throws EntityNotFoundException;

    /**
	 * Deletes an existing Uniquegrouping with the given id.
	 *
	 * @param uniquegroupingId The id of the Uniquegrouping to be deleted; value cannot be null.
	 * @return The deleted Uniquegrouping.
	 * @throws EntityNotFoundException if no Uniquegrouping found with the given id.
	 */
	Uniquegrouping delete(Integer uniquegroupingId) throws EntityNotFoundException;

	/**
	 * Find all Uniquegroupings matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Uniquegroupings.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<Uniquegrouping> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all Uniquegroupings matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Uniquegroupings.
     *
     * @see Pageable
     * @see Page
	 */
    Page<Uniquegrouping> findAll(String query, Pageable pageable);

    /**
	 * Exports all Uniquegroupings matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Uniquegroupings in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the Uniquegrouping.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

