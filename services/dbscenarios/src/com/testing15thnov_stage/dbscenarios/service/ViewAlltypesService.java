/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.ViewAlltypes;
import com.testing15thnov_stage.dbscenarios.ViewAlltypesId;

/**
 * Service object for domain model class {@link ViewAlltypes}.
 */
public interface ViewAlltypesService {

    /**
     * Creates a new ViewAlltypes. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on ViewAlltypes if any.
     *
     * @param viewAlltypes Details of the ViewAlltypes to be created; value cannot be null.
     * @return The newly created ViewAlltypes.
     */
	ViewAlltypes create(@Valid ViewAlltypes viewAlltypes);


	/**
	 * Returns ViewAlltypes by given id if exists.
	 *
	 * @param viewalltypesId The id of the ViewAlltypes to get; value cannot be null.
	 * @return ViewAlltypes associated with the given viewalltypesId.
     * @throws EntityNotFoundException If no ViewAlltypes is found.
	 */
	ViewAlltypes getById(ViewAlltypesId viewalltypesId) throws EntityNotFoundException;

    /**
	 * Find and return the ViewAlltypes by given id if exists, returns null otherwise.
	 *
	 * @param viewalltypesId The id of the ViewAlltypes to get; value cannot be null.
	 * @return ViewAlltypes associated with the given viewalltypesId.
	 */
	ViewAlltypes findById(ViewAlltypesId viewalltypesId);


	/**
	 * Updates the details of an existing ViewAlltypes. It replaces all fields of the existing ViewAlltypes with the given viewAlltypes.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on ViewAlltypes if any.
     *
	 * @param viewAlltypes The details of the ViewAlltypes to be updated; value cannot be null.
	 * @return The updated ViewAlltypes.
	 * @throws EntityNotFoundException if no ViewAlltypes is found with given input.
	 */
	ViewAlltypes update(@Valid ViewAlltypes viewAlltypes) throws EntityNotFoundException;

    /**
	 * Deletes an existing ViewAlltypes with the given id.
	 *
	 * @param viewalltypesId The id of the ViewAlltypes to be deleted; value cannot be null.
	 * @return The deleted ViewAlltypes.
	 * @throws EntityNotFoundException if no ViewAlltypes found with the given id.
	 */
	ViewAlltypes delete(ViewAlltypesId viewalltypesId) throws EntityNotFoundException;

	/**
	 * Find all ViewAlltypes matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ViewAlltypes.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<ViewAlltypes> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all ViewAlltypes matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching ViewAlltypes.
     *
     * @see Pageable
     * @see Page
	 */
    Page<ViewAlltypes> findAll(String query, Pageable pageable);

    /**
	 * Exports all ViewAlltypes matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the ViewAlltypes in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the ViewAlltypes.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

