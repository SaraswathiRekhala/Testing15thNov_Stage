/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.ViewAlltypes;
import com.testing15thnov_stage.dbscenarios.ViewAlltypesId;


/**
 * ServiceImpl object for domain model class ViewAlltypes.
 *
 * @see ViewAlltypes
 */
@Service("dbscenarios.ViewAlltypesService")
@Validated
public class ViewAlltypesServiceImpl implements ViewAlltypesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ViewAlltypesServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.ViewAlltypesDao")
    private WMGenericDao<ViewAlltypes, ViewAlltypesId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ViewAlltypes, ViewAlltypesId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public ViewAlltypes create(ViewAlltypes viewAlltypes) {
        LOGGER.debug("Creating a new ViewAlltypes with information: {}", viewAlltypes);
        ViewAlltypes viewAlltypesCreated = this.wmGenericDao.create(viewAlltypes);
        return viewAlltypesCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public ViewAlltypes getById(ViewAlltypesId viewalltypesId) throws EntityNotFoundException {
        LOGGER.debug("Finding ViewAlltypes by id: {}", viewalltypesId);
        ViewAlltypes viewAlltypes = this.wmGenericDao.findById(viewalltypesId);
        if (viewAlltypes == null){
            LOGGER.debug("No ViewAlltypes found with id: {}", viewalltypesId);
            throw new EntityNotFoundException(String.valueOf(viewalltypesId));
        }
        return viewAlltypes;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public ViewAlltypes findById(ViewAlltypesId viewalltypesId) {
        LOGGER.debug("Finding ViewAlltypes by id: {}", viewalltypesId);
        return this.wmGenericDao.findById(viewalltypesId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public ViewAlltypes update(ViewAlltypes viewAlltypes) throws EntityNotFoundException {
        LOGGER.debug("Updating ViewAlltypes with information: {}", viewAlltypes);
        this.wmGenericDao.update(viewAlltypes);

        ViewAlltypesId viewalltypesId = new ViewAlltypesId();
        viewalltypesId.setPkId(viewAlltypes.getPkId());
        viewalltypesId.setByteCol(viewAlltypes.getByteCol());
        viewalltypesId.setShortCol(viewAlltypes.getShortCol());
        viewalltypesId.setIntCol(viewAlltypes.getIntCol());
        viewalltypesId.setLongCol(viewAlltypes.getLongCol());
        viewalltypesId.setFloatCol(viewAlltypes.getFloatCol());
        viewalltypesId.setDoubleCol(viewAlltypes.getDoubleCol());
        viewalltypesId.setBigdecCol(viewAlltypes.getBigdecCol());
        viewalltypesId.setBigintCol(viewAlltypes.getBigintCol());
        viewalltypesId.setCharCol(viewAlltypes.getCharCol());
        viewalltypesId.setStringCol(viewAlltypes.getStringCol());
        viewalltypesId.setTextCol(viewAlltypes.getTextCol());
        viewalltypesId.setClobCol(viewAlltypes.getClobCol());
        viewalltypesId.setDateCol(viewAlltypes.getDateCol());
        viewalltypesId.setTimeCol(viewAlltypes.getTimeCol());
        viewalltypesId.setDatetimeCol(viewAlltypes.getDatetimeCol());
        viewalltypesId.setTimestampCol(viewAlltypes.getTimestampCol());
        viewalltypesId.setBooleanCol(viewAlltypes.getBooleanCol());
        viewalltypesId.setBlobCol(viewAlltypes.getBlobCol());

        return this.wmGenericDao.findById(viewalltypesId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public ViewAlltypes delete(ViewAlltypesId viewalltypesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ViewAlltypes with id: {}", viewalltypesId);
        ViewAlltypes deleted = this.wmGenericDao.findById(viewalltypesId);
        if (deleted == null) {
            LOGGER.debug("No ViewAlltypes found with id: {}", viewalltypesId);
            throw new EntityNotFoundException(String.valueOf(viewalltypesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<ViewAlltypes> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ViewAlltypes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<ViewAlltypes> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ViewAlltypes");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table ViewAlltypes to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

