/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.VirtualTable;
import com.testing15thnov_stage.dbscenarios.VirtualTableId;

/**
 * Service object for domain model class {@link VirtualTable}.
 */
public interface VirtualTableService {

    /**
     * Creates a new VirtualTable. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualTable if any.
     *
     * @param virtualTable Details of the VirtualTable to be created; value cannot be null.
     * @return The newly created VirtualTable.
     */
	VirtualTable create(@Valid VirtualTable virtualTable);


	/**
	 * Returns VirtualTable by given id if exists.
	 *
	 * @param virtualtableId The id of the VirtualTable to get; value cannot be null.
	 * @return VirtualTable associated with the given virtualtableId.
     * @throws EntityNotFoundException If no VirtualTable is found.
	 */
	VirtualTable getById(VirtualTableId virtualtableId) throws EntityNotFoundException;

    /**
	 * Find and return the VirtualTable by given id if exists, returns null otherwise.
	 *
	 * @param virtualtableId The id of the VirtualTable to get; value cannot be null.
	 * @return VirtualTable associated with the given virtualtableId.
	 */
	VirtualTable findById(VirtualTableId virtualtableId);

    /**
	 * Find and return the VirtualTable for given shortcol  if exists.
	 *
	 * @param shortcol value of shortcol; value cannot be null.
	 * @return VirtualTable associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualTable found.
	 */
    VirtualTable getByShortcol(Short shortcol)throws EntityNotFoundException;

    /**
	 * Find and return the VirtualTable for given stringCol  anddateCol  if exists.
	 *
	 * @param stringCol value of stringCol; value cannot be null.
	 * @param dateCol value of dateCol; value cannot be null.
	 * @return VirtualTable associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualTable found.
	 */
    VirtualTable getByStringColAndDateCol(String stringCol, Date dateCol)throws EntityNotFoundException;

    /**
	 * Find and return the VirtualTable for given charCol  if exists.
	 *
	 * @param charCol value of charCol; value cannot be null.
	 * @return VirtualTable associated with the given inputs.
     * @throws EntityNotFoundException if no matching VirtualTable found.
	 */
    VirtualTable getByCharCol(String charCol)throws EntityNotFoundException;

	/**
	 * Updates the details of an existing VirtualTable. It replaces all fields of the existing VirtualTable with the given virtualTable.
	 *
     * This method overrides the input field values using Server side or database managed properties defined on VirtualTable if any.
     *
	 * @param virtualTable The details of the VirtualTable to be updated; value cannot be null.
	 * @return The updated VirtualTable.
	 * @throws EntityNotFoundException if no VirtualTable is found with given input.
	 */
	VirtualTable update(@Valid VirtualTable virtualTable) throws EntityNotFoundException;

    /**
	 * Deletes an existing VirtualTable with the given id.
	 *
	 * @param virtualtableId The id of the VirtualTable to be deleted; value cannot be null.
	 * @return The deleted VirtualTable.
	 * @throws EntityNotFoundException if no VirtualTable found with the given id.
	 */
	VirtualTable delete(VirtualTableId virtualtableId) throws EntityNotFoundException;

	/**
	 * Find all VirtualTables matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
	 *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
	 *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualTables.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
	 */
    @Deprecated
	Page<VirtualTable> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Find all VirtualTables matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching VirtualTables.
     *
     * @see Pageable
     * @see Page
	 */
    Page<VirtualTable> findAll(String query, Pageable pageable);

    /**
	 * Exports all VirtualTables matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
	 *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
	 */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the VirtualTables in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
	 * @return The count of the VirtualTable.
	 */
	long count(String query);

	/**
	 * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
	 * @return Paginated data with included fields.

     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
	Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}

