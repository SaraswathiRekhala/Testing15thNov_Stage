/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.VirtualTable;
import com.testing15thnov_stage.dbscenarios.VirtualTableId;


/**
 * ServiceImpl object for domain model class VirtualTable.
 *
 * @see VirtualTable
 */
@Service("dbscenarios.VirtualTableService")
@Validated
public class VirtualTableServiceImpl implements VirtualTableService {

    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualTableServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.VirtualTableDao")
    private WMGenericDao<VirtualTable, VirtualTableId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VirtualTable, VirtualTableId> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public VirtualTable create(VirtualTable virtualTable) {
        LOGGER.debug("Creating a new VirtualTable with information: {}", virtualTable);
        VirtualTable virtualTableCreated = this.wmGenericDao.create(virtualTable);
        return virtualTableCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public VirtualTable getById(VirtualTableId virtualtableId) throws EntityNotFoundException {
        LOGGER.debug("Finding VirtualTable by id: {}", virtualtableId);
        VirtualTable virtualTable = this.wmGenericDao.findById(virtualtableId);
        if (virtualTable == null){
            LOGGER.debug("No VirtualTable found with id: {}", virtualtableId);
            throw new EntityNotFoundException(String.valueOf(virtualtableId));
        }
        return virtualTable;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public VirtualTable findById(VirtualTableId virtualtableId) {
        LOGGER.debug("Finding VirtualTable by id: {}", virtualtableId);
        return this.wmGenericDao.findById(virtualtableId);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualTable getByShortcol(Short shortcol) {
        Map<String, Object> shortcolMap = new HashMap<>();
        shortcolMap.put("shortcol", shortcol);

        LOGGER.debug("Finding VirtualTable by unique keys: {}", shortcolMap);
        VirtualTable virtualTable = this.wmGenericDao.findByUniqueKey(shortcolMap);

        if (virtualTable == null){
            LOGGER.debug("No VirtualTable found with given unique key values: {}", shortcolMap);
            throw new EntityNotFoundException(String.valueOf(shortcolMap));
        }

        return virtualTable;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualTable getByStringColAndDateCol(String stringCol, Date dateCol) {
        Map<String, Object> stringColAndDateColMap = new HashMap<>();
        stringColAndDateColMap.put("stringCol", stringCol);
        stringColAndDateColMap.put("dateCol", dateCol);

        LOGGER.debug("Finding VirtualTable by unique keys: {}", stringColAndDateColMap);
        VirtualTable virtualTable = this.wmGenericDao.findByUniqueKey(stringColAndDateColMap);

        if (virtualTable == null){
            LOGGER.debug("No VirtualTable found with given unique key values: {}", stringColAndDateColMap);
            throw new EntityNotFoundException(String.valueOf(stringColAndDateColMap));
        }

        return virtualTable;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public VirtualTable getByCharCol(String charCol) {
        Map<String, Object> charColMap = new HashMap<>();
        charColMap.put("charCol", charCol);

        LOGGER.debug("Finding VirtualTable by unique keys: {}", charColMap);
        VirtualTable virtualTable = this.wmGenericDao.findByUniqueKey(charColMap);

        if (virtualTable == null){
            LOGGER.debug("No VirtualTable found with given unique key values: {}", charColMap);
            throw new EntityNotFoundException(String.valueOf(charColMap));
        }

        return virtualTable;
    }

	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public VirtualTable update(VirtualTable virtualTable) throws EntityNotFoundException {
        LOGGER.debug("Updating VirtualTable with information: {}", virtualTable);
        this.wmGenericDao.update(virtualTable);

        VirtualTableId virtualtableId = new VirtualTableId();
        virtualtableId.setCharCol(virtualTable.getCharCol());
        virtualtableId.setDateCol(virtualTable.getDateCol());
        virtualtableId.setDoubleCol(virtualTable.getDoubleCol());
        virtualtableId.setBigdecCol(virtualTable.getBigdecCol());
        virtualtableId.setStringCol(virtualTable.getStringCol());
        virtualtableId.setShortcol(virtualTable.getShortcol());

        return this.wmGenericDao.findById(virtualtableId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public VirtualTable delete(VirtualTableId virtualtableId) throws EntityNotFoundException {
        LOGGER.debug("Deleting VirtualTable with id: {}", virtualtableId);
        VirtualTable deleted = this.wmGenericDao.findById(virtualtableId);
        if (deleted == null) {
            LOGGER.debug("No VirtualTable found with id: {}", virtualtableId);
            throw new EntityNotFoundException(String.valueOf(virtualtableId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<VirtualTable> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all VirtualTables");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<VirtualTable> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all VirtualTables");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table VirtualTable to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

