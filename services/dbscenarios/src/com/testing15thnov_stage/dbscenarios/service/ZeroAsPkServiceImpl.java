/*Copyright (c) 2017-2018 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/
package com.testing15thnov_stage.dbscenarios.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.testing15thnov_stage.dbscenarios.ZeroAsPk;


/**
 * ServiceImpl object for domain model class ZeroAsPk.
 *
 * @see ZeroAsPk
 */
@Service("dbscenarios.ZeroAsPkService")
@Validated
public class ZeroAsPkServiceImpl implements ZeroAsPkService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ZeroAsPkServiceImpl.class);


    @Autowired
    @Qualifier("dbscenarios.ZeroAsPkDao")
    private WMGenericDao<ZeroAsPk, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ZeroAsPk, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "dbscenariosTransactionManager")
    @Override
	public ZeroAsPk create(ZeroAsPk zeroAsPk) {
        LOGGER.debug("Creating a new ZeroAsPk with information: {}", zeroAsPk);
        ZeroAsPk zeroAsPkCreated = this.wmGenericDao.create(zeroAsPk);
        return zeroAsPkCreated;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public ZeroAsPk getById(Integer zeroaspkId) throws EntityNotFoundException {
        LOGGER.debug("Finding ZeroAsPk by id: {}", zeroaspkId);
        ZeroAsPk zeroAsPk = this.wmGenericDao.findById(zeroaspkId);
        if (zeroAsPk == null){
            LOGGER.debug("No ZeroAsPk found with id: {}", zeroaspkId);
            throw new EntityNotFoundException(String.valueOf(zeroaspkId));
        }
        return zeroAsPk;
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public ZeroAsPk findById(Integer zeroaspkId) {
        LOGGER.debug("Finding ZeroAsPk by id: {}", zeroaspkId);
        return this.wmGenericDao.findById(zeroaspkId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "dbscenariosTransactionManager")
	@Override
	public ZeroAsPk update(ZeroAsPk zeroAsPk) throws EntityNotFoundException {
        LOGGER.debug("Updating ZeroAsPk with information: {}", zeroAsPk);
        this.wmGenericDao.update(zeroAsPk);

        Integer zeroaspkId = zeroAsPk.getId();

        return this.wmGenericDao.findById(zeroaspkId);
    }

    @Transactional(value = "dbscenariosTransactionManager")
	@Override
	public ZeroAsPk delete(Integer zeroaspkId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ZeroAsPk with id: {}", zeroaspkId);
        ZeroAsPk deleted = this.wmGenericDao.findById(zeroaspkId);
        if (deleted == null) {
            LOGGER.debug("No ZeroAsPk found with id: {}", zeroaspkId);
            throw new EntityNotFoundException(String.valueOf(zeroaspkId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public Page<ZeroAsPk> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ZeroAsPks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Page<ZeroAsPk> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all ZeroAsPks");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service dbscenarios for table ZeroAsPk to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "dbscenariosTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

